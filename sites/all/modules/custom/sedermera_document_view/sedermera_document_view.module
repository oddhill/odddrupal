<?php

/**
 * @file sedermera_document_view.module
 * Main module file for the Sedermera Document View module.
 */

/**
 * Implements hook_menu().
 */
function sedermera_document_view_menu() {
  $items['dokument/read_user'] = array(
    'title' => 'Läst per användare',
    'page callback' => 'view_page_per_user',
    'access arguments' => array('access content'),
    'menu_name' => 'main-menu',
    'parent_identifier' => 'main-menu_dokument:dokument',
    'weight' => 49,
  );

  $items['dokument/read_doc'] = array(
    'title' => 'Läst per dokument',
    'page callback' => 'view_page_per_doc',
    'access arguments' => array('access content'),
    'menu_name' => 'main-menu',
    'parent_identifier' => 'main-menu_dokument:dokument',
    'weight' => 50,
  );

  $items['dokument/lista'] = array(
    'title' => 'Alla dokument',
    'page callback' => 'view_page_user',
    'access arguments' => array('access content'),
    'menu_name' => 'main-menu',
    'parent_identifier' => 'main-menu_dokument:dokument',
    'weight' => 0,
  );

  return $items;
}

/**
 * Page callback for the document listing.
 *
 * @return array
 *   A renderable array for the page.
 */
function view_page_per_user() {
  $get = drupal_get_query_parameters();

  if (!isset($get['selected']) || ($get['selected'] == 0)) {
    drupal_set_title("Välj användare för att se lästa dokument");
  }
  else {
    drupal_set_title("Lästa dokument per användare");
  }

  // Return an empty page. The actual content will be set using context.
  return array();
}

/**
 * Page callback for the document listing.
 *
 * @return array
 *   A renderable array for the page.
 */
function view_page_per_doc() {
  $get = drupal_get_query_parameters();

  if (!isset($get['selected']) || ($get['selected'] == 0)) {
    drupal_set_title("Välj användare för att se lästa dokument");
  }
  else {
    drupal_set_title("Lästa dokument per användare");
  }

  // Return an empty page. The actual content will be set using context.
  return array();
}

/**
 * Page callback for the document listing.
 *
 * @return array
 *   A renderable array for the page.
 */
function view_page_user() {
  drupal_set_title("Dina dokument");

  // Return an empty page. The actual content will be set using context.
  return array();
}

/**
 * Implements hook_block_info().
 */
function sedermera_document_view_block_info() {
  $blocks['read_per_user'] = array(
    'info' => 'Läst per användare',
  );
  $blocks['read_per_doc'] = array(
    'info' => 'Läst per dokument',
  );
  $blocks['read_all'] = array(
    'info' => 'Alla dokument',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sedermera_document_view_block_view($delta = '') {
  switch ($delta) {
    case  'read_per_user':
      $get = drupal_get_query_parameters();

      if (!isset($get['selected']) || ($get['selected'] == 0)) {
        $block = setupBlock('Välj användare för att se lästa dokument');

        // Add form to block content.
        $block['content'] = array(
          'form' => drupal_get_form('userForm'),
        );
        return $block;
      }
      else {
        $block = setupBlock('Dokument som lästs av användare');

        // Get list of documents
        $documents = getDocuments();

        // Create the header for the table. Add rows
        $header = array(
          array('data' => 'Titel', 'class' => array('table-head')),
          array('data' => 'Revision', 'class' => array('table-head')),
          array('data' => 'Läst', 'class' => array('table-head')),
        );
        $rows = array();
        foreach ($documents as $doc) {
          $class = 'not-approved';
          $read = 'Nej';
          if (userHasRead($doc->field_document_user_read, $get['selected'])) {
            $class = 'approved';
            $read = 'Ja';
          }
          $rows[] = array(
            array(
              'data' => $doc->title,
            ),
            array(
              'data' => $doc->num_revisions,
            ),
            array(
              'data' => $read,
              'class' => $class,
            ),
          );
        }
        // Create table.
        $table = generateTable($header, $rows);

        // Add table to block content.
        $block['content'] = array(
          'form' => drupal_get_form('userForm'),
          'table' => $table,
        );
        return $block;
      }
      break;
    case 'read_per_doc':
      $get = drupal_get_query_parameters();

      if (!isset($get['selected']) || ($get['selected'] == 0)) {
        $block = setupBlock('Välj dokument för att se användare som har läst');

        // Add form to block content.
        $block['content'] = array(
          'form' => drupal_get_form('docForm'),
        );
        return $block;
      }
      else {
        $block = setupBlock('Användare som läst dokumentet');

        // Get list of users
        $users = getUsers();

        // Create the header for the table. Add rows
        $header = array(
          array('data' => 'Användare', 'class' => array('table-head')),
          array('data' => 'Läst', 'class' => array('table-head')),
        );
        $rows = array();
        $node = node_load(NULL, $get['selected']);
        foreach ($users as $uid => $user) {
          $class = 'not-approved';
          $read = 'Nej';
         if (userHasRead($node->field_document_user_read, $uid)) {
            $class = 'approved';
            $read = 'Ja';
          }
          $rows[] = array(
            array(
              'data' => $user,
            ),
            array(
              'data' => $read,
              'class' => $class,
            ),
          );
        }
        // Create table.
        $table = generateTable($header, $rows);

        // Add table to block content.
        $block['content'] = array(
          'form' => drupal_get_form('docForm'),
          'table' => $table,
        );
        return $block;
      }
      break;
    case 'read_all':
      global $user;
      $block = setupBlock('Dina dokument');

      // Get list of documents
      $documents = getDocuments();

      $appendix = array();

      // Appendix list (documents that are appendix to other documents)
      foreach ($documents as $doc) {
        if (!empty($doc->field_document_appendix)) {
          $appendix[] = $doc;
        }
      }

      $documents = getDocuments();

      // Create the header for the table. Add rows
      $header = array(
        array('data' => 'Titel', 'class' => array('table-head')),
        array('data' => 'Revision', 'class' => array('table-head')),
        array('data' => 'Läst', 'class' => array('table-head')),
      );
      $rows = array();
      foreach ($documents as $doc) {
        if (empty($doc->field_document_appendix)) {
          generateRows($rows, '', $doc, $appendix, 'document');
        }
      }
      // Create table.
      $table = generateTable($header, $rows);

      // Add table to block content.
      $block['content'] = array(
        'table' => $table,
      );
      return $block;
      break;
  }
}

/**
 * Helper function to generate rows recursiv
 * @param  &$rows  Rows array
 * @param  $prefix Current level of tabbing
 * @param  $doc    The document to look at
 * @param  $appendix List of the document appendix
 */
function generateRows(&$rows, $prefix, $doc, $appendix, $rowClass) {
  $class = 'not-approved';
  $read = 'Nej';
  if (userHasRead($doc->field_document_user_read, $user->uid)) {
    $class = 'approved';
    $read = 'Ja';
  }
  $rows[] = array(
    array(
      'data' => $prefix . l($doc->title, 'node/' . $doc->nid),
      'class' => $rowClass,
    ),
    array(
      'data' => $doc->num_revisions,
      'class' => $rowClass,
    ),
    array(
      'data' => $read,
      'class' => $rowClass . ' ' . $class,
    ),
  );

  $docAppendix = getDocAppendix($doc, $appendix);
  foreach ($docAppendix as $app) {
    generateRows($rows, $prefix . '- ', $app, $appendix, 'appendix');
  }
}

/**
 * Helper function for recursive function
 * @param  $doc      Document to check if got appendix
 * @param  $appendix List of appendix
 * @return Array of appednix if any else empty array
 */
function getDocAppendix($doc, $appendix) {
  $ret = array();
  foreach ($appendix as $app) {
    if (!empty($app->field_document_appendix)) {
      foreach ($app->field_document_appendix['und'] as $x) {
        if ($x['target_id'] == $doc->nid) {
          $ret[] = $app;
        }
      }
    }
  }
  return $ret;
}

/**
 * Helper function for block setup to reduce code redundency
 * @param  $subject Block subject
 * @return Renderable block array;
 */
function setupBlock($subject) {
  array(
    'subject' => $subject,
    'content' => array(
      '#markup' => '<div class="empty-container"><p>Det finns inga dokument</p></div>',
    ),
  );
}

/**
 * Helper function for table generation to reduce code redundency
 * @param  $header  Table header
 * @param  $rows    Table rows
 * @return Renderable table array
 */
function generateTable($header, $rows) {
  return array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#prefix' => '<div class="table-wrapper">',
    '#suffix' => '</div>',
  );
}

/**
 * Check if user has read current document
 * @return TRUE if has read else FALSE
 */
function userHasRead($userList, $user) {
  if (!empty($userList)) {
    foreach ($userList[LANGUAGE_NONE] as $uid) {
      if ($uid['target_id'] == $user) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Get documents
 * @return entity loaded documents
 */
function getDocuments() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyOrderBy('title', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $document_nids = array_keys($result['node']);
    return entity_load('node', $document_nids);
  }
}

/**
 * Form user filter
 */
function userForm($form, &$form_state) {
  $get = drupal_get_query_parameters();
  $form['selected'] = array(
    '#type' => 'select',
    '#title' => t('Selected'),
    '#options' => getUsersOptions(),
    '#default_value' => $get['selected'],
    '#descritption' => 'Description',
    '#attributes' => array(
      'onchange' => "form.submit('selected')",
    ),
  );

  $form['#method'] = 'get';

  return $form;
}

/**
 * Get users
 * @return Array of users in key value. uid => username
 */
function getUsers() {
  $result = db_query('SELECT u.uid AS uid, n.field_user_name_value AS name FROM users AS u INNER JOIN field_data_field_user_name AS n ON (u.uid = n.entity_id) WHERE u.uid > 1');

  $users = $result->fetchAll();

  $return = array();
  foreach ($users as $user) {
    $return[$user->uid] = $user->name;
  }

  return $return;
}

/**
 * Get users options
 * @return Array of users in key value. uid => username
 */
function getUsersOptions() {
  $return = array();
  $return[0] = '-- Välj --';

  $return = $return + getUsers();

  return $return;
}

/**
 * Form doc filter
 */
function docForm($form, &$form_state) {
  $get = drupal_get_query_parameters();
  $form['selected'] = array(
    '#type' => 'select',
    '#title' => t('Selected'),
    '#options' => getDocOptions(),
    '#default_value' => $get['selected'],
    '#descritption' => 'Description',
    '#attributes' => array(
      'onchange' => "form.submit('selected')",
    ),
  );

  $form['#method'] = 'get';

  return $form;
}

/**
 * Get doc options
 * @return Array of documents in key value. vid => title
 */
function getDocOptions() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyOrderBy('title', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $document_nids = array_keys($result['node']);
    $entities = entity_load('node', $document_nids);

    $return = array();
    $return[0] = '-- Välj --';
    foreach ($entities as $entity) {
      $return[$entity->vid] = $entity->title;
    }

    return $return;
  }
}
















