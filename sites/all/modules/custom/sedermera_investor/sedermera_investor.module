<?php

/**
 * @file sedermera_investor.module
 * Main module file for the Sedermera Investor module.
 */

/**
 * Implements hook_permission().
 */
function sedermera_investor_permission() {
  return array(
    'view investors' => array(
      'title' => t('View investors'),
      'description' => t('Access the administration list for investors.'),
    ),
    'administer investors' => array(
      'title' => t('Administer investors'),
      'description' => t('Add entities of any investor bundles.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sedermera_investor_menu() {
  $items['investerare/skapa'] = array(
    'title' => 'Lägg till investerare',
    'page callback' => 'sedermera_investor_create_page',
    'access arguments' => array('administer investors'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function sedermera_investor_menu_alter(&$items) {
  // Get the entity info for the investor entity type.
  $investor_info = entity_get_info('investor');

  // Iterate through the bundles.
  foreach ($investor_info['bundles'] as $bundle_name => $bundle_info) {
    // Change the delete link for every bundle to a regular menu callback in
    // order to get rid of the tab.
    $items["investor/{$bundle_name}/%eckentity/delete"]['type'] = MENU_CALLBACK;

    // Change the title callback for every bundle in order to use the entity
    // label.
    $items["investor/{$bundle_name}/%eckentity"]['title callback'] = 'sedermera_investor_entity_page_title';
    $items["investor/{$bundle_name}/%eckentity"]['title arguments'] = array(2);
  }
}

/**
 * Implements hook_views_api().
 */
function sedermera_investor_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'sedermera_investor') . '/views',
  );
}

/**
 * Title callback for the entity pages for investor bundles.
 */
function sedermera_investor_entity_page_title($entity) {
  // Return the label of the entity.
  return entity_label('investor', $entity);
}

/**
 * Implements hook_admin_paths_alter().
 */
function sedermera_investor_admin_paths_alter(&$paths) {
  // Don't treat the add forms for investor bundles as administrative pages, in
  // order to use the sites default theme rather than the administration theme.
  $paths['admin/structure/entity-type/investor/*/add'] = FALSE;
}

/**
 * Page callback for the investerare/skapa path.
 *
 * This will generate a page that looks like the node/add page.
 *
 * @see node_add_page()
 */
function sedermera_investor_create_page() {
  // Get the entity info for the investor entity type.
  $investor_info = entity_get_info('investor');

  // Setup the descriptions for the different bundles. The ECK module doesn't
  // support descriptions, like node types. This is a way to mimic the same
  // behavior for this particular page.
  $descriptions = array(
    'company' => 'Lägg till ett nytt investmentbolag. Dessa kan kopplas till flera ägare.',
    'person' => 'Lägg till en ny privatperson.',
    'lead' => 'Lägg till en ny lead.',
  );

  // Iterate through the bundles, add add a link for each bundle. This will be
  // used to genereate the output.
  foreach ($investor_info['bundles'] as $bundle_name => $bundle_info) {
    if (user_access("eck administer investor $bundle_name entities") || user_access("eck add investor $bundle_name entities"))
    $items[] = array(
      'title' => $bundle_info['label'],
      'href' => "admin/structure/entity-type/investor/{$bundle_name}/add",
      'description' => isset($descriptions[$bundle_name]) ? $descriptions[$bundle_name] : '',
      'localized_options' => array(
        'query' => array('destination' => 'investerare'),
      ),
    );
  }

  // Return a list which looks like the node add list. This isn't actually
  // nodes, but it's convinient to use the same theme function since we'd like
  // to generate a similar list.
  return theme('node_add_list', array('content' => $items));
}

/**
 * Implements hook_field_widget_form_alter().
 */
function sedermera_investor_field_widget_form_alter(&$element, &$form_state, $context) {
  // Disable access to the field_shared_temp field. This will hopefully be
  // managed automatically in the future. We'll disable it for now, just to make
  // sure that we avoid any confusion for the end user.
  if ($element['#field_name'] == 'field_shared_temp') {
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_investor_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Alter the exposed form for the investor page and offer embed displays.
  if (in_array($form['#id'], array('views-exposed-form-investors-page', 'views-exposed-form-investors-offer-embed'))) {
    // Get the country values from the database. We'll use a regular DB Query in
    // order to improve performance.
    $available_countries = db_query("SELECT DISTINCT field_shared_address_country FROM {field_data_field_shared_address}")->fetchAllKeyed();

    // Remove the options that aren't stored in the database.
    $form['country']['#options'] = array_intersect_key($form['country']['#options'], $available_countries);

    // Disable access to the country field and remove the label if the options
    // are empty.
    if (empty($form['country']['#options'])) {
      $form['country']['#access'] = FALSE;
      unset($form['#info']['filter-field_shared_address_country']);
    }

    // Get the industry values from the database. We'll use a regular DB Query
    // here as well, for the same reason as above...
    $available_industries = db_query("SELECT DISTINCT field_shared_industries_tid FROM {field_data_field_shared_industries}")->fetchAllKeyed();

    // Remove the options that aren't stored in the database, and disable access
    // to the field if the options are empty.
    $form['industries']['#options'] = array_intersect_key($form['industries']['#options'], $available_industries);

    // Disable access to the industries field and remove the label if the
    // options are empty.
    if (empty($form['industries']['#options'])) {
      $form['industries']['#access'] = FALSE;
      unset($form['#info']['filter-field_shared_industries_tid']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_investor_form_eck__entity__form_add_investor_person_alter(&$form, &$form_state, $form_id) {
  if (!empty($_POST['lead_id'])) {
    $lead = entity_load_single('investor', $_POST['lead_id']);
    $wrapper = entity_metadata_wrapper('investor', $lead);

    $form['field_invest_pers_first_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_lead_first_name->value();
    $form['field_invest_pers_last_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_lead_last_name->value();
    $form['field_shared_email'][LANGUAGE_NONE][0]['email']['#default_value'] = $wrapper->field_shared_email->value();
    $form['field_shared_phone'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_shared_phone->value();
    $form['field_shared_cell'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_shared_cell->value();
    $form['field_shared_notes'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_shared_notes->value();

    $lead->publish = 1;
    $lead->save();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_investor_form_eck__entity__form_add_investor_company_alter(&$form, &$form_state, $form_id) {
  if (!empty($_POST['lead_id'])) {
    $lead = entity_load_single('investor', $_POST['lead_id']);
    $wrapper = entity_metadata_wrapper('investor', $lead);

    $form['field_invest_comp_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_lead_first_name->value() . " " . $wrapper->field_lead_last_name->value();
    $form['field_shared_email'][LANGUAGE_NONE][0]['email']['#default_value'] = $wrapper->field_shared_email->value();
    $form['field_shared_phone'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_shared_phone->value();
    $form['field_shared_cell'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_shared_cell->value();
    $form['field_shared_notes'][LANGUAGE_NONE][0]['value']['#default_value'] = $wrapper->field_shared_notes->value();

    $lead->publish = 1;
    $lead->save();
  }
}

/**
 * Implements hook_node_presave
 */
function sedermera_investor_node_presave($node) {
  if ($node->type == 'person') {
    global $user;

    $new_node = new stdClass();
    $new_node->title = $node->title . " ID kontroll";
    $new_node->type = "kontrolluppgift_id";
    node_object_prepare($new_node);
    $new_node->language = LANGUAGE_NONE;
    $new_node->uid = $user->uid;
    $new_node->status = 1;
    $new_node->promote = 0;
    $new_node->comment = 0;

    $new_node = node_submit($new_node);
    node_save($new_node);

    $node->field_user_id_ctrl[LANGUAGE_NONE][0]['target_id'] = $new_node->nid;
  }
}

/**
 * Implements hook_node_validate().
 */
function sedermera_investor_node_validate($node, $form, &$form_state) {
  if ($form_state['values']['type'] == 'person') {
    if ($form_state['values']['field_user_lead'][LANGUAGE_NONE][0]['value'] == 0) {
      if ($form_state['values']['field_user_mail'][LANGUAGE_NONE][0]['email'] == '') {
        form_set_error('field_user_mail', t('Mejl address måste fyllas i.'));
      }
      if ($form_state['values']['field_user_ssn'][LANGUAGE_NONE][0]['value'] == '') {
        form_set_error('field_user_ssn', t('Personnummer måste fyllas i.'));
      }
    }
  }
}
