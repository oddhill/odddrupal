<?php

/**
 * @file sedermera_offer.module
 * Main module file for the Sedermera Offer module.
 */

/**
 * Implements hook_menu().
 */
function sedermera_offer_menu() {
  $items['node/%/intressenter/%/teckna'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sedermera_offer_sign_confirm', 1, 3),
    'access callback' => 'sedermera_offer_investors_admin_access',
    'access arguments' => array(1, 'eck administer offer offer entities'),
  );

  $items['node/%/kontaktlista/lagg-till'] = array(
    'title' => 'Lägg till investerare',
    'type' => MENU_CALLBACK,
    'title callback' => 'sedermera_offer_investors_add_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sedermera_offer_investors_add', 1),
    'access callback' => 'sedermera_offer_investors_admin_access',
    'access arguments' => array(1, 'eck add offer offer entities'),
  );

  return $items;
}

/**
 * Form function for the confirm page when signing an offer.
 */
function sedermera_offer_sign_confirm($form, &$form_state, $transaction_id, $offer_id) {
  // Load the transaction node and offer entity.
  $transaction = entity_metadata_wrapper('node', $transaction_id);
  $offer = entity_metadata_wrapper('offer', $offer_id);

  // Add the offer entity to the form.
  $form['#offer'] = $offer;

  // Create the text that we'll use for the confirmation form.
  $text = format_string('Är du säker på att du vill teckna %investor för %transaction?', array(
    '%investor' => $offer->field_offer_investor->title->value(),
    '%transaction' => $transaction->title->value(),
  ));

  // Return the confirmation form.
  return confirm_form($form, $transaction->title->value(), "node/$transaction_id/intressenter", $text);
}

/**
 * Submit callback for the confirmation form when signing a transaction.
 */
function sedermera_offer_sign_confirm_submit($form, &$form_state) {
  // Get the offer that should get signed.
  $offer = $form['#offer'];

  // Set the boolean field to TRUE, set the timestamp, and save the entity.
  $offer->field_offer_signed->set(TRUE);
  $offer->field_offer_signed_date->set(REQUEST_TIME);
  $offer->save();

  // Display a message, and return to the overview page.
  drupal_set_message(format_string('%investor har tecknats.', array('%investor' => $offer->field_offer_investor->title->value())));
  $form_state['redirect'] = "node/{$offer->field_offer_cap_rais->nid->value()}/intressenter";
}

/**
 * Implements hook_node_access().
 */
function sedermera_offer_node_access($node, $op, $account) {
  if ($node->type != 'capital_raising' || $op != 'update') {
    // Bail out if the user isn't about to edit an existing capital raising.
    return NODE_ACCESS_IGNORE;
  }

  return $node->status ? NODE_ACCESS_IGNORE : NODE_ACCESS_DENY;
}

/**
 * Implements hook_entity_presave().
 */
function sedermera_offer_entity_presave($entity, $type) {
  if ($type != 'offer' || $entity->is_new) {
    // Bail out if this isn't an existing offer entity.
    return;
  }

  // Get the interested boolean and the unchanged value.
  $interested = field_get_items('offer', $entity, 'field_offer_interested');
  $interested_original = field_get_items('offer', $entity->original, 'field_offer_interested');

  // Bail out if the value hasn't changed.
  if ($interested[0]['value'] == $interested_original[0]['value']) {
    return;
  }

  // Set the interested date to the current time if the offer has been marked
  // as interested, or remove the previous value if it hasn't been marked as
  // interested.
  $entity->field_offer_interested_date = $interested[0]['value'] ? array(LANGUAGE_NONE => array(array('value' => REQUEST_TIME))) : array();
}

/**
 * Title callback for the add investors page.
 *
 * @param int $capital_raising_nid
 *   The node id for the capital raising node.
 *
 * @return string
 *   The title that will be used for the page.
 */
function sedermera_offer_investors_add_title($capital_raising_nid) {
  // Load the node, and return the title.
  $node = node_load($capital_raising_nid);
  return $node->title;
}

/**
 * Access callback when modifying existing offers or when adding new investors
 * to existing capital raisings.
 *
 * $param int $capital_raising_nid
 *   The node id for the capital raisong node.
 * $param string $permission
 *   The regular permission that will be checked if the capital raising isn't
 *   archived.
 */
function sedermera_offer_investors_admin_access($capital_raising_nid, $permission) {
  // Load the capital raising node.
  $node = node_load($capital_raising_nid);

  // Allow access if the node isn't archived and the user has the specified
  // permission.
  return $node->status && user_access($permission);
}

/**
 * Form function for the add investors page.
 *
 * @param int $capital_raising_nid
 *   The node id for the capital raising node.
 */
function sedermera_offer_investors_add($form, &$form_state, $capital_raising_nid) {
  // Add the capital raising nid to the internal values.
  $form['capital_raising_nid'] = array(
    '#type' => 'value',
    '#value' => $capital_raising_nid,
  );

  // Add the offer display from the investors view as a prefix to the form. The
  // view is needed in order to filter among the investors. The view can't be
  // embedded as a subform within the node form, since this will break the AJAX
  // functionality. The reason is unknown, but that's just the way it is...
  $form['#prefix'] = views_embed_view('investors', 'offer_embed');

  // Get the exiting investors for this capital raising.
  $existing_investors = sedermera_offer_get_investors_for_capital_raising($capital_raising_nid);

  // Get the investors from the database, and remove the ones that are already
  // added.
  $investors = db_query('SELECT id, title FROM {eck_investor}')->fetchAllKeyed();
  $available_investors = array_diff_key($investors, array_flip($existing_investors));

  // Add checkboxes for every available investor. This will get its values from
  // the embedded view. See the attached javascript for more information about
  // what's going on.
  $form['investors'] = array(
    '#type' => 'checkboxes',
    '#options' => $available_investors,
    '#default_value' => isset($form_state['values']['investors']) ? $form_state['values']['investors'] : array(),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'sedermera_offer') . '/sedermera_offer_workflow.js'
      ),
    ),
    '#prefix' => '<div style="display: none;">',
    '#suffix' => '</div>',
  );

  // Add the submit button.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Lägg till valda investerare',
  );

  return $form;
}

/**
 * Submit callback for the add investor form.
 */
function sedermera_offer_investors_add_submit($form, &$form_state) {
  foreach (array_filter($form_state['values']['investors']) as $investor_id) {
    // Setup the values for the offer entity.
    $values = array(
      'type' => 'offer',
      'field_offer_cap_rais' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $form_state['values']['capital_raising_nid']),
        ),
      ),
      'field_offer_investor' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $investor_id),
        ),
      ),
    );

    // Create the offer, and save it.
    $offer = entity_create('offer', $values);
    entity_save('offer', $offer);
  }

  // Display a message, and redirect to the "Erbjudande" view.
  drupal_set_message('De valda investerarna har lagts till.');
  $form_state['redirect'] = "node/{$form_state['values']['capital_raising_nid']}/kontaktlista";
}

/**
 * Implements hook_theme().
 */
function sedermera_offer_theme() {
  return array(
    'sedermera_offer_block_remaining' => array(
      'template' => 'sedermera-offer-block-remaining',
      'variables' => array(
        'guaranteed' => NULL,
        'committed' => NULL,
        'total' => array('max' => '?', 'percentage' => 0, 'amount' => 0),
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function sedermera_offer_block_info() {
  $blocks['stock_remaining'] = array(
    'info' => 'Units för transaktion',
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sedermera_offer_block_view($delta = '') {
  // Load the node based on the second argument.
  $node = node_load(arg(1));

  // Bail out if this isn't a capital raising node.
  if (!$node || $node->type != 'capital_raising') {
    return;
  }

  // Create the block structure, and attach the CSS and JS that's required for
  // the progress bar.
  $block = array(
    'subject' => 'Upptecknat',
    'content' => array(
      '#theme' => 'sedermera_offer_block_remaining',
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'sedermera_offer') . '/bower_components/bootstrap-progressbar/css/bootstrap-progressbar-3.3.0.css',
        ),
        'js' => array(
          drupal_get_path('module', 'sedermera_offer') . '/bower_components/bootstrap-progressbar/bootstrap-progressbar.js',
          drupal_get_path('module', 'sedermera_offer') . '/sedermera_offer_block.js',
        ),
      ),
    ),
  );

  // Get the maximum total, guaranteed and commitment values.
  $guaranteed_max = sedermera_offer_capital_raising_get_signed_guaranteed_max($node);
  $commitment_max = sedermera_offer_capital_raising_get_signed_commitment_max($node);
  $total_max = sedermera_offer_capital_raising_get_signed_total_max($node);

  // Get the current total value and calculate the percentage.
  $total_current = sedermera_offer_capital_raising_get_signed_total($node);
  $total_percentage = round($total_max ? ($total_current / $total_max) * 100 : 0);

  // Add the values to the variables.
  $block['content']['#total']['current'] = preg_replace('/\,0$/u', '', number_format($total_current, 1, ',', ' '));
  $block['content']['#total']['percentage'] = $total_percentage;
  $block['content']['#total']['max'] = $total_max ? preg_replace('/\,0$/u', '', number_format($total_max, 1, ',', ' ')) : '?';

  // Add the variables for the guaranteed values, if a guaranteed goal has been
  // set.
  if ($guaranteed_max) {
    // Get the current amount and calculate the percentage.
    $guaranteed_current = sedermera_offer_capital_raising_get_signed_guaranteed($node);
    $guaranteed_percentage = round($guaranteed_max ? ($guaranteed_current / $guaranteed_max) * 100 : 0);

    // Add the values to the variables.
    $block['content']['#guaranteed']['current'] = preg_replace('/\,0$/u', '', number_format($guaranteed_current, 1, ',', ' '));
    $block['content']['#guaranteed']['percentage'] = $guaranteed_percentage;
    $block['content']['#guaranteed']['max'] = preg_replace('/\,0$/u', '', number_format($guaranteed_max, 1, ',', ' '));
  }

  // Add the variables for the committed values, if a commited goal has been
  // set.
  if ($commitment_max) {
    // Get the current amount and calculate the percentage.
    $committed_current = sedermera_offer_capital_raising_get_signed_commitment($node);
    $committed_percentage = round($commitment_max ? ($committed_current / $commitment_max) * 100 : 0);

    // Add the values to the variables.
    $block['content']['#committed']['current'] = preg_replace('/\,0$/u', '', number_format($committed_current, 1, ',', ' '));
    $block['content']['#committed']['percentage'] = $committed_percentage;
    $block['content']['#committed']['max'] = preg_replace('/\,0$/u', '', number_format($commitment_max, 1, ',', ' '));
  }

  // Return the block.
  return $block;
}

/**
 * Get the total amount that's available for a capital raising.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return int
 *   Returns the total amount.
 */
function sedermera_offer_capital_raising_get_signed_total_max($node) {
  // Wrap the node in order to get its values.
  $wrapper = entity_metadata_wrapper('node', $node);

  // Return the total amount.
  return $wrapper->field_cap_rais_goal_tot->value();
}

/**
 * Get the commitment amount that's available for a capital raising.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return int
 *   Returns the max commitment amount.
 */
function sedermera_offer_capital_raising_get_signed_commitment_max($node) {
  // Wrap the node in order to get its values.
  $wrapper = entity_metadata_wrapper('node', $node);

  // Get the total max amount.
  $total = sedermera_offer_capital_raising_get_signed_total_max($node);

  // Get the commitment percentage.
  $commitment = $wrapper->field_cap_rais_goal_com->value();

  // Return the amount based on the percentage if both the max and commitment
  // values has been provided, or 0 otherwise.
  return ($total && $commitment) ? ($total * ($commitment / 100)) : 0;
}

/**
 * Get the guaranteed amount that's available for a capital raising.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return int
 *   Returns the max guaranteed amount.
 */
function sedermera_offer_capital_raising_get_signed_guaranteed_max($node) {
  // Wrap the node in order to get its values.
  $wrapper = entity_metadata_wrapper('node', $node);

  // Get the total max amount.
  $total = sedermera_offer_capital_raising_get_signed_total_max($node);

  // Get the guaranteed percentage.
  $guaranteed = $wrapper->field_cap_rais_goal_guar->value();

  // Return the amount based on the percentage if both the max and guaranteed
  // values has been provided, or 0 otherwise.
  return ($total && $guaranteed) ? ($total * ($guaranteed / 100)) : 0;
}

/**
 * Get the total amount that's signed for a capital raising.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return int
 *   Returns the total amount.
 */
function sedermera_offer_capital_raising_get_signed_total($node) {
  // Get the currently guaranteed and committed amount, and returm the sum.
  $committed = sedermera_offer_capital_raising_get_signed_commitment($node);
  $guaranteed = sedermera_offer_capital_raising_get_signed_guaranteed($node);
  return $committed + $guaranteed;
}

/**
 * Get the commited signed amount for a capital raising.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return float
 *   The currently commited amount.
 */
function sedermera_offer_capital_raising_get_signed_commitment($node) {
  // The initial return value.
  $signed = 0;

  // Create and execute a query that fetches the offers that are signed and
  // connected to this capital raising.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'offer')
    ->fieldCondition('field_offer_cap_rais', 'target_id', $node->nid)
    ->fieldCondition('field_offer_interested', 'value', 1);
  $result = $query->execute();

  // Increment the signed value with each offer.
  if (!empty($result['offer'])) {
    foreach ($result['offer'] as $row) {
      $signed += entity_metadata_wrapper('offer', $row->id)->field_offer_amount->value();
    }
  }

  // Return the total amount.
  return $signed;
}

/**
 * Get the guaranteed signed amount for a capital raising.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return float
 *   The currently guaranteed amount.
 */
function sedermera_offer_capital_raising_get_signed_guaranteed($node) {
  // The initial return value.
  $signed = 0;

  // Create and execute a query that fetches the offers that are signed and
  // connected to this capital raising.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'offer')
    ->fieldCondition('field_offer_cap_rais', 'target_id', $node->nid)
    ->fieldCondition('field_offer_interested', 'value', 1);
  $result = $query->execute();

  // Increment the signed value with each offer.
  if (!empty($result['offer'])) {
    foreach ($result['offer'] as $row) {
      $signed += entity_metadata_wrapper('offer', $row->id)->field_offer_amount_guar->value();
    }
  }

  // Return the total amount.
  return $signed;
}

/**
 * Implements hook_msnf_info_steps_alter().
 */
function sedermera_offer_msnf_info_steps_alter(&$steps_cached, $entity_type, $bundle, $form, $form_state = array()) {
  // Disable every step when editing an existing capital raising node.
  if ($entity_type == 'node' && $bundle == 'capital_raising' && !empty($form['node']->nid)) {
    $steps_cached = array();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_offer_form_capital_raising_node_form_alter(&$form, &$form_state) {
  if ($form['#node']->nid) {
    // Don't alter the form when editing an existing node, bail out.
    return;
  }

  // Add the offer display from the investors view as a prefix to the form. The
  // view is needed in order to filter among the investors. The view can't be
  // embedded as a subform within the node form, since this will break the AJAX
  // functionality. The reason is unknown, but that's just the way it is...
  if ($form_state['storage']['step'] == 'step_cap_rais_2') {
    $form['#prefix'] = views_embed_view('investors', 'offer_embed');
  }

  // Get the available investors from the database.
  $available_investors = db_query('SELECT id, title FROM {eck_investor}')->fetchAllKeyed();

  // Get the selected investors, based on the form values, and sort them
  // alphabetically.
  $selected_investors = isset($form_state['values']['investors']) ? array_intersect_key($available_investors, array_filter($form_state['values']['investors'])) : array();
  asort($selected_investors);

  // Add checkboxes for every available investor. This will be added to the
  // second step, and will get its values from the embedded view. See the
  // attached javascript for more information about what's going on.
  $form['investors'] = array(
    '#type' => 'checkboxes',
    '#options' => $available_investors,
    '#default_value' => array_keys($selected_investors),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'sedermera_offer') . '/sedermera_offer_workflow.js'
      ),
    ),
    '#prefix' => '<div style="display: none;">',
    '#suffix' => '</div>',
  );
  $form['#step_children']['investors'] =  'step_cap_rais_2';

  // Add elements that are required for the third step.
  if ($form_state['storage']['step'] == 'step_cap_rais_3') {
    // Add a wrapper for all the elements in the right column.
    $form['right'] = array(
      '#prefix' => '<div id="preview-investors" class="column">',
      '#suffix' => '</div>',
    );
    $form['#step_children']['right'] =  'step_cap_rais_3';

    // Add checkboxes for every selected investor, which will be added to the
    // third step. This will be used as the confirmation page, where the user will
    // be able to deselect some of the investors before creating the transaction.
    $form['right']['selected_investors'] = array(
      '#type' => 'checkboxes',
      '#options' => $selected_investors,
      '#default_value' => array_keys($selected_investors),
      '#prefix' => '<h3>Kontaktlista</h3>',
    );

    // Build the node object based of the form values. This will be used to
    // generate the preview.
    $node = node_form_submit_build_node($form, $form_state);

    // Add the rendered node as a preview to the left fieldset. This fieldset will
    // be added to the third step.
    $form['preview_node'] = node_view($node);
    $form['preview_node']['#prefix'] = '<div id="preview-transaction" class="column">';
    $form['preview_node']['#suffix'] = '</div>';
    $form['#step_children']['preview_node'] =  'step_cap_rais_3';
  }

  // Add javascript that are used in every step for the form.
  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'sedermera_offer') . '/sedermera_offer.js'
    ),
  );

  // Change the text of the submit button.
  $form['actions']['submit']['#value'] = 'Skapa transaktion';
}

/**
 * Implements hook_node_insert().
 */
function sedermera_offer_node_insert($node) {
  if ($node->type != 'capital_raising' || empty($node->selected_investors)) {
    return;
  }

  // Create offer entities for each investor.
  foreach (array_filter($node->selected_investors) as $investor_id) {
    // Setup the values for the offer entity.
    $values = array(
      'type' => 'offer',
      'field_offer_cap_rais' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $node->nid)
        ),
      ),
      'field_offer_investor' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $investor_id)
        ),
      ),
    );

    // Create the offer, and save it.
    $offer = entity_create('offer', $values);
    entity_save('offer', $offer);
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function sedermera_offer_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  // Remove the action selection and submit button for the VBO form for the
  // investors embeded offer display.
  if ($vbo->view->name == 'investors' && $vbo->view->current_display == 'offer_embed') {
    $form['select']['#access'] = FALSE;
    $form['actions']['#access'] = FALSE;

    // Disable existing investors when using this form for adding investors to
    // an existing capital raising.
    if (($nid = arg(1)) && is_numeric($nid)) {
      // Get the existing investors for this capital raising.
      $existing_investors = sedermera_offer_get_investors_for_capital_raising($nid);

      // Find the checkboxes that points to the existing investors.
      foreach (element_children($form['views_bulk_operations']) as $key) {
        $element = &$form['views_bulk_operations'][$key];

        // Disable and check this checkbox if it points to an existing investor.
        if (in_array($element['#return_value'], $existing_investors)) {
          $element['#attributes']['disabled'] = 'disabled';
          $element['#attributes']['checked'] = 'checked';
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_offer_form_views_form_offers_page_alter(&$form, &$form_state) {
  sedermera_offer_form_editablefields_form_alter($form, $form_state);

  // Disable access to the entire form when there's no result, since it doesn't
  // make any sense to print the form when there's nothing that can be selected.
  if (!$form_state['build_info']['args'][0]->result) {
    $form['#access'] = FALSE;
  }

  // Show and enable the submit button when any of the rows has been checked.
  $form['actions']['submit']['#states'] = array(
    'visible' => array(
      'td.views-field-views-send input' => array('checked' => TRUE),
    ),
    'enabled' => array(
      'td.views-field-views-send input' => array('checked' => TRUE),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_offer_form_views_form_offers_interest_alter(&$form, &$form_state) {
  sedermera_offer_form_editablefields_form_alter($form, $form_state);

  // Remove access to the Save button since the editable fields are saved via
  // AJAX.
  $form['actions']['#access'] = FALSE;
}

/**
 * Helper function which alters various editablefields forms.
 */
function sedermera_offer_form_editablefields_form_alter(&$form, &$form_state) {
  // Attach custom javascript which will improve the submit functionality.
  $form['output']['#attached']['js'][] = drupal_get_path('module', 'sedermera_offer') . '/sedermera_offer_editablefields.js';
}

/**
 * Get every investor that are connected to a capital raising via an offer
 * entity.
 *
 * @param int $capital_raising_nid.
 *   The node ID for the capital raising node.
 *
 * @return array
 *   An array with the ID's for every investor entity.
 */
function sedermera_offer_get_investors_for_capital_raising($capital_raising_nid) {
  // Create and execute the query.
  $query = db_select('field_data_field_offer_cap_rais', 'capital_raising');
  $query->addField('offer', 'field_offer_investor_target_id', 'investor');
  $query->join('field_data_field_offer_investor', 'offer', 'capital_raising.entity_id = offer.entity_id');
  $query->condition('field_offer_cap_rais_target_id', $capital_raising_nid);
  $result = $query->execute();

  // Return the first column for the entire result.
  return $result->fetchCol();
}

/**
 * Implements hook_field_access().
 */
function sedermera_offer_field_access($op, $field, $entity_type, $entity, $account) {
  if ($entity_type != 'offer' || $op != 'edit' || !$entity) {
    // This is not an offer that is being edited, bail out.
    return;
  }

  // Wrap the offer in order to access the existing field values.
  $wrapper = entity_metadata_wrapper('offer', $entity);

  // Never allow offers to be edited if the capital raising is archived.
  if (!$wrapper->field_offer_cap_rais->status->value()) {
    return FALSE;
  }
}
