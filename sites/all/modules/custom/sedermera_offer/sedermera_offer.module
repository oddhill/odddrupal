<?php

/**
 * @file sedermera_offer.module
 * Main module file for the Sedermera Offer module.
 */

/**
 * Implements hook_menu().
 */
function sedermera_offer_menu() {
  $items['node/%/intressenter/%/teckna'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sedermera_offer_sign_confirm', 1, 3),
    'access arguments' => array('eck administer offer offer entities'),
  );

  return $items;
}

/**
 * Form function for the confirm page when signing an offer.
 */
function sedermera_offer_sign_confirm($form, &$form_state, $transaction_id, $offer_id) {
  // Load the transaction node and offer entity.
  $transaction = entity_metadata_wrapper('node', $transaction_id);
  $offer = entity_metadata_wrapper('offer', $offer_id);

  // Add the offer entity to the form.
  $form['#offer'] = $offer;

  // Create the text that we'll use for the confirmation form.
  $text = format_string('Är du säker på att du vill teckna %investor för %transaction?', array(
    '%investor' => $offer->field_offer_investor->title->value(),
    '%transaction' => $transaction->title->value(),
  ));

  // Return the confirmation form.
  return confirm_form($form, $transaction->title->value(), "node/$transaction_id/intressenter", $text);
}

/**
 * Submit callback for the confirmation form when signing a transaction.
 */
function sedermera_offer_sign_confirm_submit($form, &$form_state) {
  // Get the offer that should get signed.
  $offer = $form['#offer'];

  // Set the boolean field to TRUE, set the timestamp, and save the entity.
  $offer->field_offer_signed->set(TRUE);
  $offer->field_offer_signed_date->set(REQUEST_TIME);
  $offer->save();

  // Display a message, and return to the overview page.
  drupal_set_message(format_string('%investor har tecknats.', array('%investor' => $offer->field_offer_investor->title->value())));
  $form_state['redirect'] = "node/{$offer->field_offer_cap_rais->nid->value()}/intressenter";
}

/**
 * Implements hook_block_info().
 */
function sedermera_offer_block_info() {
  $blocks['stock_remaining'] = array(
    'info' => 'Aktier för transaktion',
    'cache' => DRUPAL_CACHE_PER_PAGE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sedermera_offer_block_view($delta = '') {
  // Load the node based on the second argument.
  $node = node_load(arg(1));

  // Bail out if this isn't a capital raising node.
  if (!$node || $node->type != 'capital_raising') {
    return;
  }

  // Get the maximum value, the currently signed value, and calculate the
  // percentage.
  $maximum = sedermera_offer_capital_raising_get_signed_max($node);
  $signed = sedermera_offer_capital_raising_get_signed_current($node);
  $percentage = $maximum ? ($signed / $maximum) * 100 : 100;

  // Create the renderable array for the progress bar.
  $progress_bar = array(
    '#prefix' => '<div class="progress">',
    '#markup' => '<div class="progress-bar" data-transitiongoal="' . $percentage . '"></div>',
    '#suffix' => '</div>',
  );

  // Create the renderable array for the total progress.
  $signed_readable = preg_replace('/\,0$/u', '', number_format($signed, 1, ',', ' '));
  $maximum_readable = $maximum ? preg_replace('/\,0$/u', '', number_format($maximum, 1, ',', ' ')) : '?';
  $progress_total = array(
    '#prefix' => '<div class="total">',
    '#markup' => "$signed_readable av $maximum_readable miljoner SEK",
    '#suffix' => '</div>',
  );

  // Create the block structure, and attach the CSS and JS that's required for
  // the progress bar.
  $block = array(
    'subject' => 'Upptecknat',
    'content' => array(
      'progress' => $progress_bar,
      'total' => $progress_total,
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'sedermera_offer') . '/bower_components/bootstrap-progressbar/css/bootstrap-progressbar-3.3.0.css',
        ),
        'js' => array(
          drupal_get_path('module', 'sedermera_offer') . '/bower_components/bootstrap-progressbar/bootstrap-progressbar.js',
          drupal_get_path('module', 'sedermera_offer') . '/sedermera_offer.js',
        ),
      ),
    ),
  );

  // Return the block.
  return $block;
}

/**
 * Get the total amount that's available for a capital raising, in terms of
 * million SEK.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return int
 *   Returns the total amount, based on the number of stocks and price per
 *   stock.
 */
function sedermera_offer_capital_raising_get_signed_max($node) {
  // Wrap the node in order to get its values.
  $wrapper = entity_metadata_wrapper('node', $node);

  // Get the total number of stocks, and the price per stock.
  $number_of_stocks = $wrapper->field_cap_rais_post->value();
  $price_per_stock = $wrapper->field_cap_rais_rate->value();

  // Return the total amount, based on the above parameters.
  return ($number_of_stocks * $price_per_stock) / 1000000;
}

/**
 * Get the currently signed amount for a capital raising.
 *
 * @param obj $node
 *   The capital raising node object.
 *
 * @return float
 *   The currently signed amount.
 */
function sedermera_offer_capital_raising_get_signed_current($node) {
  // The initial return value.
  $signed = 0;

  // Create and execute a query that fetches the offers that are signed and
  // connected to this capital raising.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'offer')
    ->fieldCondition('field_offer_cap_rais', 'target_id', $node->nid)
    ->fieldCondition('field_offer_signed', 'value', 1);
  $result = $query->execute();

  // Increment the signed value with each offer.
  if (!empty($result['offer'])) {
    foreach ($result['offer'] as $row) {
      $signed += entity_metadata_wrapper('offer', $row->id)->field_offer_amount->value();
    }
  }

  // Return the total amount.
  return $signed;
}

/**
 * Implements hook_msnf_info_steps_alter().
 */
function sedermera_offer_msnf_info_steps_alter(&$steps_cached, $entity_type, $bundle, $form, $form_state = array()) {
  // Disable every step when editing an existing capital raising node.
  if ($entity_type == 'node' && $bundle == 'capital_raising' && !empty($form['node']->nid)) {
    $steps_cached = array();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_offer_form_capital_raising_node_form_alter(&$form, &$form_state) {
  if ($form['#node']->nid) {
    // Don't alter the form when editing an existing node, bail out.
    return;
  }

  // Add the offer display from the investors view as a prefix to the form. The
  // view is needed in order to filter among the investors. The view can't be
  // embedded as a subform within the node form, since this will break the AJAX
  // functionality. The reason is unknown, but that's just the way it is...
  if ($form_state['storage']['step'] == 'step_cap_rais_2') {
    $form['#prefix'] = views_embed_view('investors', 'offer_embed');
  }

  // Get the available investors from the database.
  $available_investors = db_query('SELECT id, title FROM {eck_investor}')->fetchAllKeyed();

  // Get the selected investors, based on the form values, and sort them
  // alphabetically.
  $selected_investors = isset($form_state['values']['investors']) ? array_intersect_key($available_investors, array_filter($form_state['values']['investors'])) : array();
  asort($selected_investors);

  // Add checkboxes for every available investor. This will be added to the
  // second step, and will get its values from the embedded view. See the
  // attached javascript for more information about what's going on.
  $form['investors'] = array(
    '#type' => 'checkboxes',
    '#options' => $available_investors,
    '#default_value' => array_keys($selected_investors),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'sedermera_offer') . '/sedermera_offer.js'
      ),
    ),
    '#prefix' => '<div style="display: none;">',
    '#suffix' => '</div>',
  );
  $form['#step_children']['investors'] =  'step_cap_rais_2';

  // Add elements that are required for the third step.
  if ($form_state['storage']['step'] == 'step_cap_rais_3') {
    // Add checkboxes for every selected investor, which will be added to the
    // third step. This will be used as the confirmation page, where the user will
    // be able to deselect some of the investors before creating the transaction.
    $form['selected_investors'] = array(
      '#type' => 'checkboxes',
      '#options' => $selected_investors,
      '#default_value' => array_keys($selected_investors),
      '#prefix' => '<div id="preview-investors"><h3>Erbjudna investerare</h3>',
      '#suffix' => '</div>',
    );
    $form['#step_children']['selected_investors'] =  'step_cap_rais_3';

    // Build the node object based of the form values. This will be used to
    // generate the preview.
    $node = node_form_submit_build_node($form, $form_state);

    // Add the rendered node as a preview to the left fieldset. This fieldset will
    // be added to the third step.
    $form['preview_node'] = node_view($node);
    $form['preview_node']['#prefix'] = '<div id="preview-transaction">';
    $form['preview_node']['#suffix'] = '</div>';
    $form['#step_children']['preview_node'] =  'step_cap_rais_3';
  }

  // Change the text of the submit button.
  $form['actions']['submit']['#value'] = 'Spara och skicka ut';
}


/**
 * Implements hook_node_insert().
 */
function sedermera_offer_node_insert($node) {
  if ($node->type != 'capital_raising' || empty($node->selected_investors)) {
    return;
  }

  // Create offer entities for each investor.
  foreach (array_filter($node->selected_investors) as $investor_id) {
    // Setup the values for the offer entity.
    $values = array(
      'type' => 'offer',
      'field_offer_cap_rais' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $node->nid)
        ),
      ),
      'field_offer_investor' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $investor_id)
        ),
      ),
    );

    // Create the offer, and save it.
    $offer = entity_create('offer', $values);
    entity_save('offer', $offer);
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function sedermera_offer_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  // Remove the action selection and submit button for the VBO form for the
  // investors embeded offer display.
  if ($vbo->view->name == 'investors' && $vbo->view->current_display == 'offer_embed') {
    $form['select']['#access'] = FALSE;
    $form['actions']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_offer_form_views_form_offers_page_alter(&$form, &$form_state) {
  // Disable access to the regular submit button since the values are changed
  // via AJAX.
  $form['actions']['#access'] = FALSE;
}
