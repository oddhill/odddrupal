<?php

/**
 * @file sedermera_verification.module
 * Main module file for the Sedermera Verification module.
 */

// Constants for the different verification statuses.
define('SEDERMERA_VERIFICATION_NOT_APPROVED', 0);
define('SEDERMERA_VERIFICATION_EXPIRED', 1);
define('SEDERMERA_VERIFICATION_EXPIRING', 2);
define('SEDERMERA_VERIFICATION_APPROVED', 3);

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_verification_form_eck__entity__form_add_investor_person_alter(&$form, &$form_state, $form_id) {
  // Disable the fields for "Kontroller" for the regular entity form as we want
  // to present this at another form.
  sedermera_verification_disable_verification_elements($form);

  // Disable access to the verification approved and expiration field.
  $form['field_shared_veri_appr']['#access'] = FALSE;
  $form['field_shared_veri_expire']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_verification_form_eck__entity__form_add_investor_company_alter(&$form, &$form_state, $form_id) {
  // Disable the fields for "Kontroller" for the regular entity form as we want
  // to present this at another form.
  sedermera_verification_disable_verification_elements($form);

  // Disable access to the verification approved and expiration field.
  $form['field_shared_veri_appr']['#access'] = FALSE;
  $form['field_shared_veri_expire']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_verification_form_eck__entity__form_edit_investor_person_alter(&$form, &$form_state, $form_id) {
  // The edit form will be used for the "Kontroller" page as well. This means
  // that we'll need to alter the form differently, depending on the current
  // path.
  if (arg(3) == 'kontroll') {
    // Replace the form with the rendered verifications if the user doesn't have
    // the permissions to edit the entities.
    if (!user_access('eck edit verification verification entities')) {
      sedermera_verification_view_rendered_verification($form);
      sedermera_verification_add_verification_header($form);
      return;
    }

    // Disable the regular form elements and add the verification header.
    sedermera_verification_disable_regular_elements($form);
    sedermera_verification_add_verification_header($form);

    // Perform minor alterations.
    sedermera_verification_custom_form_alter($form);
  }
  else {
    // In any other case, we'll disable the verification elements.
    sedermera_verification_disable_verification_elements($form);

    // Disable access to the verification approved and expiration field.
    $form['field_shared_veri_appr']['#access'] = FALSE;
    $form['field_shared_veri_expire']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sedermera_verification_form_eck__entity__form_edit_investor_company_alter(&$form, &$form_state, $form_id) {
  // The edit form will be used for the "Kontroller" page as well. This means
  // that we'll need to alter the form differently, depending on the current
  // path.
  if (arg(3) == 'kontroll') {
    // Replace the form with the rendered verifications if the user doesn't have
    // the permissions to edit the entities.
    if (!user_access('eck edit verification verification entities')) {
      sedermera_verification_view_rendered_verification($form);
      sedermera_verification_add_verification_header($form);
      return;
    }

    // Disable the regular form elements and add the verification header.
    sedermera_verification_disable_regular_elements($form);
    sedermera_verification_add_verification_header($form);

    // Perform minor alterations.
    sedermera_verification_custom_form_alter($form);
  }
  else {
    // In any other case, we'll disable the verification elements.
    sedermera_verification_disable_verification_elements($form);

    // Disable access to the verification approved and expiration field.
    $form['field_shared_veri_appr']['#access'] = FALSE;
    $form['field_shared_veri_expire']['#access'] = FALSE;
  }
}

/**
 * Implements hook_menu().
 */
function sedermera_verification_menu_alter(&$items) {
  // Get info about the investor entities in order to get the bundles.
  $entity_info = entity_get_info('investor');

  // Add a "Kontroller" page for every bundle.
  foreach ($entity_info['bundles'] as $bundle => $info) {
    // Get the base path for this bundle.
    $base = "investor/$bundle/%eckentity";

    // Copy the info from the edit page, as we want to mimic that page.
    $items["$base/kontroll"] = $items["$base/edit"];

    // Change the access callback into our own.
    $items["$base/kontroll"]['access callback'] = 'sedermera_verification_page_access';
    $items["$base/kontroll"]['access arguments'][] = $items["$base/edit"]['access callback'];

    // Change the title for the menu tab.
    $items["$base/kontroll"]['title'] = 'Kontroll';

    // Callback for the verification status that is fetched via AJAX.
    $items["$base/kontroll/check"] = array(
      'page callback' => 'sedermera_verification_status_field_ajax',
      'page arguments' => array(2),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    );
  }
}

/**
 * Access callback for the verification form.
 *
 * This will allow access if the regular access check approves it, but will
 * also allow users with the view permission to access the page.
 *
 * return bool
 *   TRUE or FALSE depending on whether or not the user should have access to
 *   the page.
 */
function sedermera_verification_page_access() {
  // Get the arguments for this function, and pop of the regular access
  // callback.
  $args = func_get_args();
  $regular = array_pop($args);

  // Return TRUE if the regular access callback does it, or fallback to the view
  // permission.
  return call_user_func_array($regular, $args) ? TRUE : user_access('eck view verification verification entities');
}

/**
 * AJAX callback for the verification status field.
 *
 * @param obj $investor
 *   The investor entity.
 *
 * @return bool
 *   JSON encoded boolean which will be handled by the javascript callback.
 */
function sedermera_verification_status_field_ajax($investor) {
  $status = sedermera_verification_get_status($investor->id);
  drupal_json_output($status);
}

/**
 * Replaces the form with the rendered investor.
 *
 * @param array $form
 *   A structured form array.
 */
function sedermera_verification_view_rendered_verification(&$form) {
  // Disable access to the regular form elements.
  foreach (element_children($form) as $key) {
    $form[$key]['#access'] = FALSE;
  }

  // Add the rendered investor using the investor_verification view mode.
  $form['verification'] = entity_view('investor', array($form['entity']['#value']), 'investor_verification');
}

/**
 * Disables the "regular" form elements for an investor form.
 *
 * @param array $form
 *   A structured form array.
 */
function sedermera_verification_disable_regular_elements(&$form) {
  // Determine which elements that should be preserved by merging the required
  // elements with the verification elements.
  $preserve = array_merge(array('entity', 'actions', 'form_build_id', 'form_token', 'form_id'), sedermera_verification_get_verification_fields());

  // Disable access to all form elements except the ones that should be
  // preserved.
  foreach (array_diff(element_children($form), $preserve) as $name) {
    $form[$name]['#access'] = FALSE;
  }

  // Disable access to the delete button. This is done here instead of within
  // the loop above, since this is nested at the second level.
  $form['actions']['delete']['#access'] = FALSE;
}

/**
 * Disables the "verification" form elements for an investor form.
 *
 * @param array $form
 *   A structured form array.
 */
function sedermera_verification_disable_verification_elements(&$form) {
  // Loop through every investor form element and disable access to it.
  foreach (sedermera_verification_get_verification_fields() as $name) {
    $form[$name]['#access'] = FALSE;
  }
}

/**
 * Adds the header to the verification form.
 *
 * @param array $form
 *   A structured form array.
 */
function sedermera_verification_add_verification_header(&$form) {
  // Add the initial structure.
  $form['header'] = array(
    '#prefix' => '<div class="verification-header">',
    '#suffix' => '</div>',
    '#weight' => -100,
  );

  // Get the status.
  $status = sedermera_verification_get_status($form['entity']['#value']->id);

  // Determine the class and text based on the status.
  switch ($status) {
    case SEDERMERA_VERIFICATION_NOT_APPROVED:
      $class = 'not-approved';
      $text = 'inte godkänd';
      break;

    case SEDERMERA_VERIFICATION_EXPIRED:
      $class = 'expired';
      $text = 'utgången';
      break;

    default:
      $class = 'approved';
      $text = 'godkänd';
  }

  // Add the status to the header.
  $form['header']['status'] = array(
    '#prefix' => '<h2>',
    '#markup' => "Kontrollen är <span class=\"$class\">$text</span>",
    '#suffix' => '</h2>',
  );

  // Add the expiration date to the header, if the verification is approved or
  // about to expire.
  if (in_array($status, array(SEDERMERA_VERIFICATION_EXPIRING, SEDERMERA_VERIFICATION_APPROVED)) && ($expire = sedermera_verification_get_expiration_date($form['entity']['#value']->id))) {
    $form['header']['expire'] = array(
      '#prefix' => '<span class="expires">',
      '#markup' => format_string('Förfaller den @date', array('@date' => format_date($expire, 'custom', 'j/n Y'))),
      '#suffix' => '</span>',
    );
  }
}

/**
 * Minor alterations for the verification form.
 *
 * @param array $form
 *   A structured form array.
 */
function sedermera_verification_custom_form_alter(&$form) {
  // Add a submit button for the verification form.
  $form['actions']['submit']['#submit'][] = 'sedermera_verification_custom_form_submit';
}

/**
 * Submit callback for the verification form.
 *
 * This will be executed after the regular submit callbacks.
 */
function sedermera_verification_custom_form_submit($form, &$form_state) {
  // Get the entity, and redirect the user to the verification form.
  $entity = $form_state['values']['entity'];
  $form_state['redirect'] = "investor/{$entity->type}/{$entity->id}/kontroll";
}

/**
 * Implements hook_views_api().
 */
function sedermera_verification_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'sedermera_verification') . '/views',
  );
}

/**
 * Get the status for a verification, based on the ID for an investor.
 *
 * @param int $id
 *   The investor ID.
 *
 * @return int
 *   A constant which indicates the status for the verification.
 */
function sedermera_verification_get_status($id) {
  // Get the approved boolan and expiration date.
  $approved = sedermera_verification_get_approved($id);
  $expire = sedermera_verification_get_expiration_date($id);

  // Check if the verification is approved.
  if (!$approved) {
    return SEDERMERA_VERIFICATION_NOT_APPROVED;
  }

  // Check if the verification has expired.
  if ($expire < REQUEST_TIME) {
    return SEDERMERA_VERIFICATION_EXPIRED;
  }

  // Check if the verification is about to expire.
  $query = sedermera_verification_get_expiring_query($id);
  $result = $query->execute();
  if ($result->rowCount()) {
    return SEDERMERA_VERIFICATION_EXPIRING;
  }

  // Everything has been checked, which means that the verification is approved.
  return SEDERMERA_VERIFICATION_APPROVED;
}

/**
 * Get the approved status for a verification, based on the ID for an investor.
 *
 * @param int $id
 *   The investor ID.
 *
 * @return bool
 *   Boolean indicating whether or not the verification is approved.
 */
function sedermera_verification_get_approved($id) {
  // Load the investor entity.
  $wrapper = entity_metadata_wrapper('investor', $id);

  // Get the verification fields, and the available properties for this investor
  // in order to only check the available verification fields.
  $fields = sedermera_verification_get_verification_fields();
  $properties = array_keys($wrapper->getPropertyInfo());

  // Iterate through every available investor field.
  foreach (array_intersect($fields, $properties) as $field) {
    if (!$wrapper->$field->value()) {
      // The field doesn't have a value, which means that the verification isn't
      // approved.
      return FALSE;
    }

    if (!$wrapper->$field->field_verification_approved->value()) {
      // The checkbox field hasn't been checked, which means that the
      // verification hasn't been approved yet.
      return FALSE;
    }
  }

  // Everything passed, which means that the verification is ok.
  return TRUE;
}

/**
 * Get the expiration date for a verification, based on the ID for an investor.
 *
 * @param int $id
 *   The investor ID.
 *
 * @return timestamp
 *   A UNIX timestamp for when the verification will expire, or 0 if it won't
 *   expire.
 */
function sedermera_verification_get_expiration_date($id) {
  // Load the investor entity.
  $wrapper = entity_metadata_wrapper('investor', $id);

  // Set the initial return value.
  $return = 0;

  // Get the verification fields, and the available properties for this investor
  // in order to only check the available verification fields.
  $fields = sedermera_verification_get_verification_fields();
  $properties = array_keys($wrapper->getPropertyInfo());

  // Iterate through every available investor field.
  foreach (array_intersect($fields, $properties) as $field) {
    if (!$wrapper->$field->value()) {
      // The field doesn't have a value, which means that there aren't a field
      // to check.
      continue;
    }

    if (!($expire = $wrapper->$field->field_verification_date->value())) {
      // An expiration date hasn't been set for this verification.
      continue;
    }

    if (empty($return) || $expire < $return) {
      $return = $expire;
    }
  }

  // Return the smallest expiration date.
  return $return;
}

/**
 * Get the the verification fields.
 *
 * @return array
 *   An array with the names of the verification fields.
 */
function sedermera_verification_get_verification_fields() {
  return array(
    'field_shared_veri_id',
    'field_shared_veri_address',
    'field_shared_veri_eu',
    'field_shared_veri_credit',
    'field_shared_veri_register',
  );
}

/**
 * Get a query which is used to fetch expiring verifications.
 *
 * Expiring verifications are determined by comparing the expiration date with
 * the expiration date for a capital raising which the investor is connected to.
 * A verification will be considered as expiring when the expiration date is
 * before the capital raising date, or if the verification isn't approved.
 *
 * @param int $investor_id
 *   Optional ID for an investor if you don't want to check every investor.
 *
 * @return SelectQuery
 *   The unexecuted query.
 */
function sedermera_verification_get_expiring_query($investor_id = NULL) {
  // Start of from the investor table.
  $query = db_select('eck_investor', 'investor');

  // Join the capital raisings via the offer entity, in order to filter on the
  // published capital raisings and to get their expiration date.
  $query->join('field_data_field_offer_investor', 'offer_investor', 'investor.id = offer_investor.field_offer_investor_target_id');
  $query->join('field_data_field_offer_cap_rais', 'offer_capital_raising', 'offer_investor.entity_id = offer_capital_raising.entity_id');
  $query->join('node', 'node_capital_raising', 'offer_capital_raising.field_offer_cap_rais_target_id = node_capital_raising.nid');
  $query->join('field_data_field_cap_rais_date', 'capital_raising_expire', 'node_capital_raising.nid = capital_raising_expire.entity_id');

  // Join the verification expiration date and status for the investors.
  $query->join('field_data_field_shared_veri_expire', 'investor_verification_expire', 'investor.id = investor_verification_expire.entity_id');
  $query->join('field_data_field_shared_veri_appr', 'investor_verification_approved', 'investor.id = investor_verification_approved.entity_id');

  // Add the relevant fields.
  $query->addField('investor', 'id', 'id');
  $query->addField('investor', 'type', 'type');
  $query->addField('investor', 'title', 'name');
  $query->addField('investor_verification_expire', 'field_shared_veri_expire_value', 'verification');
  $query->addField('investor_verification_approved', 'field_shared_veri_appr_value', 'approved');

  // Filter on published capital raisings.
  $query->condition('node_capital_raising.status', 1);

  // Add a filter which gets the verification that are going to expire before or
  // on the same day as the capital raising, or where the verification isn't
  // approved.
  $condition = db_or();
  $condition->condition('field_shared_veri_appr_value', 0);
  $condition->where('field_shared_veri_expire_value <= field_cap_rais_date_value2');
  $query->condition($condition);

  // Filter by a investor, if one has been specified.
  if ($investor_id) {
    $query->condition('investor.id', $investor_id);
  }

  // Order by the verification status and expiration date, and group by the
  // investor names.
  $query->orderBy('field_shared_veri_appr_value')
    ->orderBy('verification')
    ->groupBy('name');

  // Return the query.
  return $query;
}

/**
 * Implements hook_entity_update().
 */
function sedermera_verification_entity_presave($entity, $type) {
  if ($type == 'investor') {
    // Get the expiration status for this investor, and save the status to the
    // investor entity if it has been set.
    $approved = sedermera_verification_get_approved($entity->id);
    $entity->field_shared_veri_appr = array(LANGUAGE_NONE => array(array('value' => intval($approved))));

    // Get the expiration date for this investor, and save the date to the
    // investor entity if it has been set.
    $expire = sedermera_verification_get_expiration_date($entity->id);
    $date = new DateObject($expire);
    $entity->field_shared_veri_expire = array(LANGUAGE_NONE => array(array('value' => $date->format(DATE_FORMAT_ISO))));
  }
}
