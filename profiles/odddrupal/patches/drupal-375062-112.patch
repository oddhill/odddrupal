diff --git a/modules/simpletest/tests/image.test b/modules/simpletest/tests/image.test
index dc95a6e..4e31b62 100644
--- a/modules/simpletest/tests/image.test
+++ b/modules/simpletest/tests/image.test
@@ -261,6 +261,7 @@ class ImageToolkitGdTestCase extends DrupalWebTestCase {
    */
   function testManipulations() {
     // If GD isn't available don't bother testing this.
+    module_load_include('inc', 'system', 'image.gd');
     if (!function_exists('image_gd_check_settings') || !image_gd_check_settings()) {
       $this->pass(t('Image manipulations for the GD toolkit were skipped because the GD toolkit is not available.'));
       return;
@@ -451,7 +452,8 @@ class ImageToolkitGdTestCase extends DrupalWebTestCase {
 
         $directory = file_default_scheme() . '://imagetests';
         file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
-        image_save($image, $directory . '/' . $op . '.' . $image->info['extension']);
+        $file_path = $directory . '/' . $op . '.' . $image->info['extension'];
+        image_save($image, $file_path);
 
         $this->assertTrue($correct_dimensions_real, format_string('Image %file after %action action has proper dimensions.', array('%file' => $file, '%action' => $op)));
         $this->assertTrue($correct_dimensions_object, format_string('Image %file object after %action action is reporting the proper height and width values.', array('%file' => $file, '%action' => $op)));
@@ -460,8 +462,10 @@ class ImageToolkitGdTestCase extends DrupalWebTestCase {
           $this->assertTrue($correct_colors, format_string('Image %file object after %action action has the correct color placement.', array('%file' => $file, '%action' => $op)));
         }
       }
-    }
 
+      // Check that saved image reloads without raising PHP errors.
+      $image_reloaded = image_load($file_path);
+    }
   }
 }
 
diff --git a/modules/system/image.gd.inc b/modules/system/image.gd.inc
index d9035e4..188b969 100644
--- a/modules/system/image.gd.inc
+++ b/modules/system/image.gd.inc
@@ -297,17 +297,27 @@ function image_gd_create_tmp(stdClass $image, $width, $height) {
   $res = imagecreatetruecolor($width, $height);
 
   if ($image->info['extension'] == 'gif') {
-    // Grab transparent color index from image resource.
+    // Find out if a transparent color is set, will return -1 if no
+    // transparent color has been defined in the image.
     $transparent = imagecolortransparent($image->resource);
 
     if ($transparent >= 0) {
-      // The original must have a transparent color, allocate to the new image.
-      $transparent_color = imagecolorsforindex($image->resource, $transparent);
-      $transparent = imagecolorallocate($res, $transparent_color['red'], $transparent_color['green'], $transparent_color['blue']);
-
-      // Flood with our new transparent color.
-      imagefill($res, 0, 0, $transparent);
-      imagecolortransparent($res, $transparent);
+      // Find out the number of colors in the image palette. It will be 0 for
+      // truecolor images.
+      $palette_size = imagecolorstotal($image->resource);
+      if ($palette_size == 0 || $transparent < $palette_size) {
+        // Set the transparent color in the new resource, either if it is a
+        // truecolor image or if the transparent color is part of the palette.
+        // Since the index of the transparency color is a property of the
+        // image rather than of the palette, it is possible that an image
+        // could be created with this index set outside the palette size.
+        $transparent_color = imagecolorsforindex($image->resource, $transparent);
+        $transparent = imagecolorallocate($res, $transparent_color['red'], $transparent_color['green'], $transparent_color['blue']);
+
+        // Flood with our new transparent color.
+        imagefill($res, 0, 0, $transparent);
+        imagecolortransparent($res, $transparent);
+      }
     }
   }
   elseif ($image->info['extension'] == 'png') {
