<?php

/**
 * @file sedermera_revision_info.module
 * Main module file for the Sedermera Revision Info module.
 */


/**
 * Imploements hook_menu()
 */
function sedermera_revision_info_menu() {
  $items['node/%/vid/%'] = array(
    'page callback' => 'get_revision',
    'page arguments' => array(1, 3, 4),
    'access callback' => TRUE,
  );
  $items['node/%/vid/%/%'] = array(
    'page callback' => 'revision_comparison',
    'page arguments' => array(1, 3, 4),
    'access callback' => TRUE,
  );

  return $items;
}

function get_revision($nid, $vid) {
  $node = node_load($nid, $vid);

  $user = user_load($node->revision_uid);
  $node->revision_uid = $user->realname;

  dprint_r($node);
}

function revision_comparison($nid, $vid_new, $vid_old) {

  $node_old = node_load($nid, $vid_old);

  // dprint_r($node_old);

  $node_new = node_load($nid, $vid_new);

  // dprint_r($node_new);

  // die;

  $diff = array();

  foreach ($node_new as $key => $value) {
    // dprint_r($key);

    $comp = compare($node_new->$key, $node_old->$key);

    if ($comp) {
      $diff[$key] = $comp;
    }
  }

  foreach ($diff['revision_uid'] as $key => $value) {
    $user = user_load($value);
    $diff['revision_uid'][$key] = $user->realname;
  }

  dprint_r($diff);


  // dprint_r(array_diff((array)$node_new, (array)$node_old));

}

function compare($new, $old) {
  if (!is_array($new) && !is_array($old)) {
    if ($new != $old) {
      return array("NEW" => $new, "OLD" => $old);
    }
  }
  else if (!empty($new) && !empty($old)) {
    return compare($new[key($new)], $old[key($old)]);
  }
  else if (!empty($new) && empty($old)) {
    return compare($new[key($new)], "");
  }
  else if (empty($new) && !empty($old)) {
    return compare("", $old[key($old)]);
  }
  else {
    return;
  }
}
