<?php

/**
 * @file sedermera_verification.module
 * Main module file for the Sedermera Verification module.
 */

// Constants for the different verification statuses.
define('SEDERMERA_VERIFICATION_NOT_APPROVED', 0);
define('SEDERMERA_VERIFICATION_EXPIRING', 1);
define('SEDERMERA_VERIFICATION_APPROVED', 2);

/**
 * Implements hook_ds_fields_info().
 */
function sedermera_verification_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    $fields['ctrl_name'] = array(
      'title'       => t('Avtalspart kontroll typ och namn'),
      'field_type'  => DS_FIELD_TYPE_FUNCTION,
      'function'    => 'sedermera_verification_ap_name_and_type',
      'ui_limit'    => array('ctrl|*'),
    );

    return array($entity_type => $fields);
  }

  return;
}

function sedermera_verification_ap_name_and_type($field) {
  $result = db_query("SELECT *
    FROM {field_data_field_investor_shared_ctrl_ua} AS ua
    INNER JOIN {field_data_field_investor_shared_ctrl_cred} AS cred ON (ua.entity_id = cred.entity_id)
    INNER JOIN {field_data_field_investor_shared_ctrl_ext} AS ext ON (ua.entity_id = ext.entity_id)
    INNER JOIN {field_data_field_investor_shared_ctrl_oth} AS oth ON (ua.entity_id = oth.entity_id)
    INNER JOIN {field_data_field_investor_shared_ctrl_ptv} AS ptv ON (ua.entity_id = ptv.entity_id)
    WHERE field_investor_shared_ctrl_ua_target_id = :nid
    OR field_investor_shared_ctrl_cred_target_id = :nid
    OR field_investor_shared_ctrl_ext_target_id = :nid
    OR field_investor_shared_ctrl_oth_target_id = :nid
    OR field_investor_shared_ctrl_ptv_target_id = :nid",
    array(':nid' => 303))->fetchAssoc();

  if ($field['entity']->nid === $result['field_investor_shared_ctrl_ua_target_id']) {
    $type = 'Uppdragsavtal';
  }
  if ($field['entity']->nid === $result['field_investor_shared_ctrl_cred_target_id']) {
    $type = 'Kreditkontroll';
  }
  if ($field['entity']->nid === $result['field_investor_shared_ctrl_ext_target_id']) {
    $type = 'Externt register';
  }
  if ($field['entity']->nid === $result['field_investor_shared_ctrl_oth_target_id']) {
    $type = 'Övriga dokument/tillägg';
  }
  if ($field['entity']->nid === $result['field_investor_shared_ctrl_ptv_target_id']) {
    $type = 'PTV-blankett';
  }

  $node_ap = node_load($result['entity_id']);

  $fields['type'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="ver-type">',
    '#markup' => $type,
    '#suffix' => '</div>',
  );

  $fields['name'] = array(
    '#type' => 'markup',
    '#prefix' => '<h2 class="ver-title">',
    '#markup' => $node_ap->title,
    '#suffix' => '</h2>',
  );

  return drupal_render($fields);
}


/**
 * Implements hook_field_formatter_info().
 */
function sedermera_verification_field_formatter_info() {
  return array(
    'sedermera_verification_status' => array(
      'label' => t('Verification status'),
      'description' => t('Prints the status of the referred verification node.'),
      'field types' => array('entityreference'),
      'settings' => array('ajax' => FALSE),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function sedermera_verification_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  return $settings['ajax'] ? t('Load via AJAX') : t("Don't load via AJAX");
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function sedermera_verification_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Add checkbox for AJAX loading.
  // TODO: Implement support for this.
  $element['ajax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Load via AJAX'),
    '#description' => t('Loads the status via AJAX in order to improve the response time for the page request.'),
    '#default_value' => $settings['ajax'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function sedermera_verification_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Build an array which stores the verification IDs.
  $verifications = array();
  foreach ($items as $item) {
    $verifications[] = $item['target_id'];
  }

  // Get the status for all of the verifications.
  $status = sedermera_verification_get_status_multiple($verifications);

  // Set a different text and class depending on the status.
  switch ($status) {
    case SEDERMERA_VERIFICATION_NOT_APPROVED:
      $text = 'Ej godkänd';
      $class = 'not-approved';
      break;

    case SEDERMERA_VERIFICATION_EXPIRING:
      $text = 'Utgående';
      $class = 'expiring';
      break;

    case SEDERMERA_VERIFICATION_APPROVED:
      $text = 'Godkänd';
      $class = 'approved';
      break;
  }

  // Add the markup.
  $element[] = array(
    '#prefix' => '<span class="verification ' . $class . '">',
    '#markup' => $text,
    '#suffix' => '</span>',
  );

  return $element;
}

/**
 * Implements hook_field_extra_fields().
 */
function sedermera_verification_field_extra_fields() {
  // Add the pseudo field for verification statuses to every node type.
  foreach (node_type_get_types() as $type => $info) {
    $extra['node'][$type] = array(
      'display' => array(
        'verification_status' => array(
          'label' => t('Verification status'),
          'description' => t('Displays the overall verification status for every referred verification entity.'),
          'weight' => 0,
        ),
      )
    );
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function sedermera_verification_node_view($node, $view_mode, $langcode) {
  // Get the display settings for the pseudo fields.
  $display = field_extra_fields_get_display('node', $node->type, $view_mode);

  // Render the verification status if it should be displayed.
  if (isset($display['verification_status']) && $display['verification_status']['visible']) {
    $status = sedermera_verification_get_status_node($node->nid);

    // Set a different text and class depending on the status.
    switch ($status) {
      case SEDERMERA_VERIFICATION_NOT_APPROVED:
        $text = 'Ej godkänd';
        $class = 'not-approved';
        break;

      case SEDERMERA_VERIFICATION_EXPIRING:
        $text = 'Utgående';
        $class = 'expiring';
        break;

      case SEDERMERA_VERIFICATION_APPROVED:
        $text = 'Godkänd';
        $class = 'approved';
        break;
    }

    // Add the markup.
    $node->content['verification_status'] = array(
      '#prefix' => '<span class="verification ' . $class . '">',
      '#markup' => $text,
      '#suffix' => '</span>',
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Hide control section when creating a person
 */
function sedermera_verification_form_person_node_form_alter(&$form, &$form_state, $form_id) {
  if (arg(1) == 'add' && arg(2) == 'person') {
    $form['field_user_id_ctrl']['#access'] = FALSE;
    unset($form['#groups']['group_id_ctrl']);
    unset($form['#fieldgroups']['group_id_ctrl']);
  }
}

/**
 * Get the status for a single verification.
 *
 * @param int $id
 *   The verification ID.
 *
 * @return int
 *   One of the following constants:
 *   - SEDERMERA_VERIFICATION_NOT_APPROVED
 *   - SEDERMERA_VERIFICATION_EXPIRING
 *   - SEDERMERA_VERIFICATION_APPROVED
 *
 * @see sedermera_verification_get_status_multiple()
 */
function sedermera_verification_get_status_single($id) {
  $wrapper = entity_metadata_wrapper('node', $id);

  // Fetch the date.
  $date = $wrapper->field_ctrl_date->value();

  // Exit early if there's no date set.
  if (!$date) {
    return SEDERMERA_VERIFICATION_NOT_APPROVED;
  }

  // Perform different comparation depending on the date type.
  switch ($wrapper->field_ctrl_app->value()) {
    case 'approved_to':
      // The date is always set to 00:00 of the specified day since the user
      // isn't allowed to select the time. We need to adjust the timestamp so
      // that it points to 23:59 instead, since the specified date is the last
      // valid date.
      $date += (60 * 60 * 23) + (60 * 59) + 59;

      if ($date < REQUEST_TIME) {
        // The date has passed.
        return SEDERMERA_VERIFICATION_NOT_APPROVED;
      }

      if ($date - REQUEST_TIME <= (60 * 60 * 24 * 30)) {
        // The date is within the next 30 days.
        return SEDERMERA_VERIFICATION_EXPIRING;
      }

      // Everything seems to be in order.
      return SEDERMERA_VERIFICATION_APPROVED;
      break;

    case 'approved_until_further_notice':
      // The verification is valid from the specified date. Simply verify that
      // the date is in the past.
      return $date <= REQUEST_TIME ? SEDERMERA_VERIFICATION_APPROVED : SEDERMERA_VERIFICATION_NOT_APPROVED;
      break;

    default:
      // The date type hasn't been set. Assume that it's not approved.
      return SEDERMERA_VERIFICATION_NOT_APPROVED;
  }
}

/**
 * Get the status for multiple verifications.
 *
 * @param array $ids
 *   The verification IDs.
 *
 * @return int
 *   The "lowest" status for all of the verifications. E.g. if two verification
 *   IDs are passed to the function, and one of them is approved and the other
 *   is expiring, expiring will be returned.
 *
 * @see sedermera_verification_get_status_single()
 */
function sedermera_verification_get_status_multiple(array $ids) {
  // Bail out early if no ids exists
  if (empty($ids)) {
    return SEDERMERA_VERIFICATION_NOT_APPROVED;
  }

  // Fetch the status for each id.
  foreach ($ids as $id) {
    $status = sedermera_verification_get_status_single($id);

    // Bail out early if the status is not approved, since there's no need to
    // check the other verifications in that case.
    if ($status === SEDERMERA_VERIFICATION_NOT_APPROVED) {
      return $status;
    }

    // Bail out early if the status is expiring, since there's no need to
    // check the other verifications in that case.
    if ($status === SEDERMERA_VERIFICATION_EXPIRING) {
      return $status;
    }
  }

  // Return the lowest status. It's safe to use min() since the status constants
  // are defined incrementally.
  return SEDERMERA_VERIFICATION_APPROVED;
}

/**
 * Get the status for an entire node.
 *
 * @param array $nid
 *   The node ID.
 *
 * @return int
 *   The "lowest" status for all of the verifications among the fields which
 *   refers to a verification node.
 *
 * @see sedermera_verification_get_status_multiple()
 */
function sedermera_verification_get_status_node($nid) {
  // Load the node.
  $node = entity_metadata_wrapper('node', $nid);

  // Store the verification IDs.
  $verifications = array();

  // Iterate through every property in order to find entityreference fields
  // which points to verification nodes.
  foreach ($node->getPropertyInfo() as $property_name => $property_info) {
    if (!$property_info['field']) {
      // This is not a field.
      continue;
    }

    // Load the field info.
    $field = field_info_field($property_name);

    if ($field['type'] != 'entityreference' || !in_array('ctrl', $field['settings']['handler_settings']['target_bundles'])) {
      // The field isn't a reference field which points to the verification
      // bundle.
      continue;
    }

    $values = $node->$property_name->value();
    if (!is_array($values)) {
      // Single value field.
      $verifications[] = $values->nid;
    }
    else {
      // Multiple value field, add each nid.
      foreach ($values as $value) {
        if (isset($value->nid)) {
          $verifications[] = $value->nid;
        }
      }
    }
  }

  // Return the verification status based on our findings.
  return sedermera_verification_get_status_multiple($verifications);
}

/**
 * Get a query which is used to fetch expiring verifications.
 *
 * Expiring verifications are determined by comparing the expiration date with
 * the expiration date for a capital raising which the investor is connected to.
 * A verification will be considered as expiring when the expiration date is
 * before the capital raising date, or if the verification isn't approved.
 *
 * @param int $investor_id
 *   Optional ID for an investor if you don't want to check every investor.
 *
 * @return SelectQuery
 *   The unexecuted query.
 */
// function sedermera_verification_get_expiring_query($investor_id = NULL) {
//   // Start of from the investor table.
//   $query = db_select('eck_investor', 'investor');

//   // Join the capital raisings via the offer entity, in order to filter on the
//   // published capital raisings and to get their expiration date.
//   $query->join('field_data_field_offer_investor', 'offer_investor', 'investor.id = offer_investor.field_offer_investor_target_id');
//   $query->join('field_data_field_offer_cap_rais', 'offer_capital_raising', 'offer_investor.entity_id = offer_capital_raising.entity_id');
//   $query->join('node', 'node_capital_raising', 'offer_capital_raising.field_offer_cap_rais_target_id = node_capital_raising.nid');
//   $query->join('field_data_field_cap_rais_date', 'capital_raising_expire', 'node_capital_raising.nid = capital_raising_expire.entity_id');

//   // Join the verification expiration date and status for the investors.
//   $query->join('field_data_field_shared_veri_expire', 'investor_verification_expire', 'investor.id = investor_verification_expire.entity_id');
//   $query->join('field_data_field_shared_veri_appr', 'investor_verification_approved', 'investor.id = investor_verification_approved.entity_id');

//   // Add the relevant fields.
//   $query->addField('investor', 'id', 'id');
//   $query->addField('investor', 'type', 'type');
//   $query->addField('investor', 'title', 'name');
//   $query->addField('investor_verification_expire', 'field_shared_veri_expire_value', 'verification');
//   $query->addField('investor_verification_approved', 'field_shared_veri_appr_value', 'approved');

//   // Filter on published capital raisings.
//   $query->condition('node_capital_raising.status', 1);

//   // Add a filter which gets the verification that are going to expire before or
//   // on the same day as the capital raising, or where the verification isn't
//   // approved.
//   $condition = db_or();
//   $condition->condition('field_shared_veri_appr_value', 0);
//   $condition->where('field_shared_veri_expire_value <= field_cap_rais_date_value2');
//   $query->condition($condition);

//   // Filter by a investor, if one has been specified.
//   if ($investor_id) {
//     $query->condition('investor.id', $investor_id);
//   }

//   // Order by the verification status and expiration date, and group by the
//   // investor names.
//   $query->orderBy('field_shared_veri_appr_value')
//     ->orderBy('verification')
//     ->groupBy('name');

//   // Return the query.
//   return $query;
// }
