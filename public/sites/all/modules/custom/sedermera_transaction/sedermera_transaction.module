<?php

/**
 * @file sedermera_offer.module
 * Main module file for the Sedermera Offer module
 */

/**
 * Implements hook_menu()
 */
function sedermera_transaction_menu() {
  $items['node/%/intressenter'] = array(
    'title' => 'Intressenter',
    'page callback' => 'sedermera_transaction_intresent',
    'page arguments' => array(1),
    'access callback' => 'sedermera_transaction_offer_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'sedermera-transaction.pages.intresent.inc',
  );

  $items['node/%/kontrollochavtal'] = array(
    'title' => 'Kontroller & Avtal',
    'page callback' => 'sedermera_transaction_control',
    'page arguments' => array(1),
    'access callback' => 'sedermera_transaction_offer_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'sedermera-transaction.pages.control.inc',
  );

  $items['node/%/teckningslista'] = array(
    'title' => 'Teckningslista',
    'page callback' => 'sedermera_transaction_sign',
    'page arguments' => array(1),
    'access callback' => 'sedermera_transaction_offer_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'sedermera-transaction.pages.sign.inc',
  );

  $items['node/%/add-ap/%/%'] = array(
    'title' => 'LÃ¤gg till avtalspart',
    'page callback' => 'sedermera_transaction_add_ap',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  $items['node/%/kontaktlista/reload'] = array(
    'page callback' => 'sedermera_transaction_reload_contact',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  $items['node/%/intressenter/reload'] = array(
    'page callback' => 'sedermera_transaction_reload_intressent',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
    'file' => 'sedermera-transaction.pages.intresent.inc',
  );

  $items['node/%/kontrollochavtal/reload'] = array(
    'page callback' => 'sedermera_transaction_reload_controller',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
    'file' => 'sedermera-transaction.pages.control.inc',
  );

  $items['node/%/teckningslista/reload'] = array(
    'page callback' => 'sedermera_transaction_reload_agreement',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
    'file' => 'sedermera-transaction.pages.sign.inc',
  );

  return $items;
}

/**
 * Checks if the current node is of type offer
 *
 * @return boolean
 *   TRUE if ok else FALSE
 */
function sedermera_transaction_offer_access() {
  // Load node
  $node = node_load(arg(1));

  // Check if node is of type offer
  return ($node->type === 'offer') ? TRUE : FALSE;
}

/**
 * Page callback for adding an avtalspart to a transaction.
 *
 * @param int $transaction_id
 *   Node ID for the transaction.
 * @param int $ap_id
 *   Node ID for the avtalspart node.
 */
function sedermera_transaction_add_ap($transaction_id, $ap_id) {
  // Create the new Transaktion AP node with a reference to the AP, and save the
  // node.
  $transaction_ap = entity_create('node', array(
    'type' => 'transaction_ap',
    'field_transaction_ap_ap' => array(
      LANGUAGE_NONE => array(
        array('target_id' => $ap_id),
      ),
    ),
  ));
  node_save($transaction_ap);

  // Update the transaction node with a reference to the newly created
  // Transaktion AP node.
  $transaction = entity_metadata_wrapper('node', $transaction_id);
  $transaction->field_transaction_investor[] = $transaction_ap;
  $transaction->save();

  // Re-render the table, and return an AJAX command which will replace the old
  // table.
  module_load_include('inc', 'sedermera_transaction', 'sedermera-transaction.pages.intresent');
  $table = sedermera_transaction_intresent($transaction->field_transaction_offer->nid->value());
  return transaction_ajax_callback('.offer-interested-list', render($table));
}

/**
 * Get array of active investment types used in the offer
 * @param  object $offer
 *   To offer to get the investment types from
 * @return array
 *   Where used investment types is TRUE
 */
function _type_investment($offer) {
  return array(
    'fe_sign' => !empty($offer->field_offer_type_fe_sign),
    'fe_warr' => !empty($offer->field_offer_type_fe_warrant),
    'le_sign' => !empty($offer->field_offer_type_le_sign),
    'le_warr' => !empty($offer->field_offer_type_le_warrant),
    'pp_sign' => !empty($offer->field_offer_type_pp_sign),
    're_sign' => !empty($offer->field_offer_type_re_sign),
    'bl_sum'  => !empty($offer->field_offer_type_bl_sum),
    'bp_sum'  => !empty($offer->field_offer_type_bp_sum),
  );
}

/**
 * Get investor nid
 * @param int $transaction_nid
 *   Transaction nid
 * @param int $agreement_nid
 *   Agreement nid
 * @return int
 *   Investor nid
 */
function _get_investor_nid($transaction_nid, $agreement_nid) {
  $result = db_query("SELECT agree.entity_id AS nid FROM {field_data_field_transaction_ap_agree} AS agree
    INNER JOIN {field_data_field_transaction_investor} AS investor
    ON (agree.entity_id = investor.field_transaction_investor_target_id)
    WHERE investor.entity_id = :t_nid AND agree.field_transaction_ap_agree_target_id = :a_nid",
    array(':t_nid' => $transaction_nid, ':a_nid' => $agreement_nid))->fetchAssoc();

  return $result['nid'];
}

/**
 * Get agreements connected to transaction
 * @param array $transactions
 *   Transaction to get agreements for
 * @return array
 *   List of agreements
 */
function _get_agreements($transactions) {
  $agreements = array();

  foreach ($transactions as $nid) {
    $result = db_query("SELECT sign.entity_id AS nid FROM {field_data_field_transaction_agree_to_sign} AS sign
      INNER JOIN {field_data_field_transaction_ap_agree} AS agree ON (agree.field_transaction_ap_agree_target_id = sign.entity_id)
      INNER JOIN {field_data_field_transaction_investor} AS investor ON (investor.field_transaction_investor_target_id = agree.entity_id)
      WHERE sign.field_transaction_agree_to_sign_value = 1
      AND investor.entity_id = :nid", array(':nid' => $nid))->fetchAllAssoc('nid');

    if (empty($result)) {
      continue;
    }

    $agreements[$nid] = array_keys($result);
  }
  return $agreements;
}

/**
 * Implements hook_form_FORM_ID_alter
 * Hide fields on control edit.
 */
function sedermera_transaction_form_transaction_agreement_node_form_alter(&$form, &$form_state, $form_id) {
  // Manipulate only if control edit
  if (arg(3) === 'control') {
    unset($form['title']);
    unset($form['field_transaction_agree_ctrl']);
    unset($form['field_transaction_agree_to_sign']);
    unset($form['field_transaction_agree_sign']);
    unset($form['field_transaction_agree_sign_dat']);
    unset($form['field_transaction_agree_type_rea']);
    $form_state['#rebuild'] = TRUE;

    // Add markup for prefix
    $form['prefix'] = array(
      '#type' => 'markup',
      '#markup' => '
      <div class="verification-header">
        <div class="verification-info">
          <div class="ver-type">Transaktion</div>
          <h2 class="ver-title">Hantera avtal</h2>
        </div>
      </div>
      ',
    );
  }
}

/**
 * Get all control transactions for the offer
 * @param int $nid
 *   Nid of the offer
 * @return array
 *   List of nid of all transactions for the offer
 */
function _get_control_transactions($nid) {
  $result = db_query("SELECT o.entity_id AS nid
    FROM field_data_field_transaction_offer AS o
    INNER JOIN field_data_field_transaction_investor AS v
    ON (o.entity_id = v.entity_id)
    INNER JOIN field_data_field_transaction_ap_ctrl AS i
    ON (v.field_transaction_investor_target_id = i.entity_id)
    INNER JOIN {field_data_field_transaction_person} AS p
    ON (o.entity_id = p.entity_id)
    INNER JOIN {node} AS n
    ON (n.nid = p.field_transaction_person_target_id)
    WHERE o.field_transaction_offer_target_id = :nid
    AND i.field_transaction_ap_ctrl_value = 1
    ORDER BY n.title ASC", array(':nid' => $nid))->fetchAllAssoc('nid');
  return array_keys($result);
}

/**
 * Get total sum for the transaction
 * @param integer $nid
 *   Nid for the transaction
 * @param array $type_investment
 *   List of which transaction types used
 * @return integer
 *   Sum of the transaction
 */
function _get_control_transactions_sum($nid, array $type_investment) {
  $result = db_query("SELECT field_transaction_investor_target_id AS nid
    FROM {field_data_field_transaction_investor} AS inv
    INNER JOIN {field_data_field_transaction_ap_ctrl} AS ap
    ON (inv.field_transaction_investor_target_id = ap.entity_id)
    WHERE inv.entity_id = :nid
    AND ap.field_transaction_ap_ctrl_value = 1", array(':nid' => $nid))->fetchAllAssoc('nid');

  $sum = 0;

  foreach (array_keys($result) as $value) {
    $node = entity_metadata_wrapper('node', node_load($value));

    if ($type_investment['fe_sign'] && isset($node->field_transaction_ap_fe_sign)) {
      $sum += $node->field_transaction_ap_fe_sign->value();
    }
    if ($type_investment['fe_warr'] && isset($node->field_transaction_ap_fe_warrant)) {
      $sum += $node->field_transaction_ap_fe_warrant->value();
    }
    if ($type_investment['le_sign'] && isset($node->field_transaction_ap_le_sign)) {
      $sum += $node->field_transaction_ap_le_sign->value();
    }
    if ($type_investment['le_warr'] && isset($node->field_transaction_ap_le_warrant)) {
      $sum += $node->field_transaction_ap_le_warrant->value();
    }
    if ($type_investment['pp_sign'] && isset($node->field_transaction_ap_pp_sign)) {
      $sum += $node->field_transaction_ap_pp_sign->value();
    }
    if ($type_investment['re_sign'] && isset($node->field_transaction_ap_re_sign)) {
      $sum += $node->field_transaction_ap_re_sign->value();
    }
    if ($type_investment['bl_sum'] && isset($node->field_transaction_ap_bl_bridging)) {
      $sum += $node->field_transaction_ap_bl_bridging->value();
    }
    if ($type_investment['bp_sum'] && isset($node->field_transaction_ap_bp_block)) {
      $sum += $node->field_transaction_ap_bp_block->value();
    }
  }
  return $sum;
}

/**
 * Implement hook_form_alter
 */
function sedermera_transaction_form_alter(&$form, &$form_state, $form_id) {
  // Alter the Kontaktlista page.
  if ($form_id === 'views_form_transactions_page') {
    // Add the reload URL.
    $form_state['reload_url'] = url('node/' . arg(1) . '/kontaktlista/reload');

    // Add submit callback to every field which is connected to the transaction
    // node, which reloads the page.
    foreach (element_children($form) as $parent) {
      foreach (element_children($form[$parent]) as $child) {
        $element = &$form[$parent][$child];
        if (isset($element['#bundle']) && $element['#bundle'] == 'transaction') {
          $element['actions']['submit']['#submit'][] = 'sedermera_transaction_submit_callback';
        }
      }
    }

    // Change label for edit button on first contact date depending on whether
    // or not the field has a value.
    foreach ($form['field_transaction_first'] as &$row) {
      $node = entity_metadata_wrapper('node', $row['#entity_id']);
      $row['actions']['edit']['#value'] = $node->field_transaction_first->value() ? 'Ãndra' : 'Ange';
    }

    // Remove access to the Save button since the editable fields are saved via
    // AJAX.
    $form['actions']['#access'] = FALSE;
  }

  // Add reload URL to the other tabs on offers.
  elseif (isset($form['#bundle']) && $form['#bundle'] == 'transaction_ap') {
    // Intressenter page, since the transaction_ap nodes are only editable from
    // this page.
    $form_state['reload_url'] = url('node/' . arg(1) . '/intressenter/reload');
  }
  elseif (isset($form['field_transaction_agree_to_sign'])) {
    // Kontroller & Avtal page, since the field_transaction_agree_to_sign field
    // is only editable from this page.
    $form_state['reload_url'] = url('node/' . arg(1) . '/kontrollochavtal/reload');
  }
  elseif (isset($form['field_transaction_agree_sign'])) {
    // Teckingslista page, since the field_transaction_agree_sign field is only
    // editable from this page.
    $form_state['reload_url'] = url('node/' . arg(1) . '/teckningslista/reload');
  }

  // Add a submit callback which reloads the current page, if we've got a URL.
  if (isset($form_state['reload_url'])) {
    $form['actions']['submit']['#submit'][] = 'sedermera_transaction_submit_callback';
  }
}

/**
 * Submit handler for editable fields on offer pages.
 *
 * @see sedermera_transaction_form_alter()
 */
function sedermera_transaction_submit_callback($form, $form_state) {
  // Return the response from the specified redirect URL.
  drupal_goto($form_state['reload_url']);
}

/**
 * Ajax reloads table content
 * @param int $offer_id
 *   Nid of offer to reload contact list for
 * @return array ajax reload
 */
function sedermera_transaction_reload_contact($offer_id) {
  // Get view
  $view = views_get_view('transactions');
  // Set display for view
  $view->set_display('page');
  // Set current offer nid as argument to view
  $view->set_arguments(array($offer_id));
  // Execute view
  $view->execute();

  return transaction_ajax_callback('.offer-contact-list', $view->render());
}

/**
 * Create ajax array
 * @param  String $class
 *   Class of div to reload
 * @param array $table
 *   Rendarable table array
 * @return array ajax command
 */
function transaction_ajax_callback($class, $table) {
  return array(
    '#type' => 'ajax',
    '#commands' => array(ajax_command_replace($class, $table)),
  );
}
