<?php

/**
 * @file sedermera_offer.module
 * Main module file for the Sedermera Offer module
 */

/**
 * Implements hook_menu()
 */
function sedermera_transaction_menu() {
  $items['node/%/intressenter'] = array(
    'title' => 'Intressenter',
    'page callback' => 'sedermera_transaction_intresent',
    'page arguments' => array(1),
    'access callback' => 'sedermera_transaction_offer_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['node/%/kontrollochavtal'] = array(
    'title' => 'Kontroller & Avtal',
    'page callback' => 'sedermera_transaction_control',
    'page arguments' => array(1),
    'access callback' => 'sedermera_transaction_offer_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['transaction/add-ap/%/%'] = array(
    'title' => 'Lägg till avtalspart',
    'page callback' => 'sedermera_transaction_add_ap',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Checks if the current node is of type offer
 * @return boolean TRUE if ok else FALSE
 */
function sedermera_transaction_offer_access() {
  // Load node
  $node = node_load(arg(1));

  // Check if node is of type offer
  if ($node->type === 'offer') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Render intresent table
 */
function sedermera_transaction_intresent($offer_id) {
  // Load all transaction ids corresponding to the current offer
  $transactions = get_interested_transactions($offer_id);

  // If no transactions exists for the offer present empty table with no content
  if (empty($transactions)) {

    return array(
      '#prefix' => '<div class="view-empty">',
      '#markup' => 'Det finns inga intresserade kontaktpersoner',
      '#suffix' => '</div>',
    );
  }
  else {
    // Load the current offer
    $offer = node_load($offer_id);

    // Array of active investment types used in the offer
    $type_investment = array(
      'fe_sign' => !empty($offer->field_offer_type_fe_sign),
      'fe_warr' => !empty($offer->field_offer_type_fe_warrant),
      'le_sign' => !empty($offer->field_offer_type_le_sign),
      'le_warr' => !empty($offer->ffield_offer_type_le_warrant),
      'pp_sign' => !empty($offer->field_offer_type_pp_sign),
      're_sign' => !empty($offer->field_offer_type_re_sign),
      'bl_sum'  => !empty($offer->field_offer_type_bl_sum),
      'bp_sum ' => !empty($offer->field_offer_type_bp_sum),
    );

    // Arrays holding the content used to build the table
    $header = array();
    $rows = array();

    // Generate the table header
    generate_header_row_interested($header, $type_investment);

    // Generate a group for each contact person and its investors
    foreach ($transactions as $transaction_nid) {
      // Load the transaction
      $transaction = node_load($transaction_nid);

      // Generate contactperson head row
      generate_contact_person_head_row_interested($rows, $transaction, $type_investment);

      // Generate the investor rows with editable fields
      foreach ($transaction->field_transaction_investor as $investor_transactions) {
        generate_investor_rows_interested($rows, $investor_transactions, $type_investment);
      }

      // Generate the contactperson sum row
      generate_sum_row_interested($rows, $type_investment);
    }

    // Generate rendarable array for the table and return it.
    return array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#prefix' => '<div class="offer-interested-list"><div id="interested-table" class="table-wrapper">',
      '#suffix' => '</div></div>',
    );
  }
}

/**
 * Creates the header row for the table
 * @param  array &$header The array to store the table header content in
 * @param  array $type_investment The active investment types used in the offer
 */
function generate_header_row_interested(array &$header, array $type_investment) {
  // Collapsible column
  $header[] = array(
    'class' => array('table-head', 'Collapsible-head')
  );

  // Name column
  $header[] = array(
    'data' => 'Kontaktperson',
    'class' => array('table-head')
  );

  // Dropdown column
  $header[] = array(
    'data' => '',
    'class' => array('table-head')
  );

  // Teckningsförbindelse if Företrädesemission column
  if ($type_investment['fe_sign']) {
    $header[] = array(
      'data' => 'Teckningsförbindelse',
      'class' => array('table-head')
    );
  }

  // Garantiåtagande if Företrädesemission column
  if ($type_investment['fe_warr']) {
    $header[] = array(
      'data' => 'Garantiåtagande',
      'class' => array('table-head')
    );
  }

  // Teckningsförbindelse if Listningsemission column
  if ($type_investment['le_sign']) {
    $header[] = array(
      'data' => 'Teckningsförbindelse',
      'class' => array('table-head')
    );
  }

  // Garantiåtagande if Listningsemission column
  if ($type_investment['le_warr']) {
    $header[] = array(
      'data' => 'Garantiåtagande',
      'class' => array('table-head')
    );
  }

  // Teckningsförbindelse if Private placement column
  if ($type_investment['pp_sign']) {
    $header[] = array(
      'data' => 'Teckningsförbindelse',
      'class' => array('table-head')
    );
  }

  // Teckningsförbindelse if Riktad emission column
  if ($type_investment['re_sign']) {
    $header[] = array(
      'data' => 'Teckningsförbindelse',
      'class' => array('table-head')
    );
  }

  // Sum if Brygglån column
  if ($type_investment['bl_sum']) {
    $header[] = array(
      'data' => 'Brygglån',
      'class' => array('table-head')
    );
  }

  // Sum if Blockpost column
  if ($type_investment['bp_sum']) {
    $header[] = array(
      'data' => 'Blockpost',
      'class' => array('table-head')
    );
  }

  // Summation column
  $header[] = array(
    'data' => 'Summa',
    'class' => array('table-head')
  );

  // Control column
  $header[] = array(
    'data' => '',
    'class' => array('table-head')
  );

  // To control column
  $header[] = array(
    'data' => 'Till kontroll',
    'class' => array('table-head')
  );
}

/**
 * Creates the group header row for the contact person
 * @param  array &$rows The array to store the table rows content in
 * @param  stdClass $transaction Node containing the transaction information
 * @param  array $type_investment The active investment types used in the offer
 */
function generate_contact_person_head_row_interested(array &$rows, stdClass $transaction, array $type_investment) {
  $transaction_wrap = entity_metadata_wrapper('node', $transaction);
  $person = $transaction_wrap->field_transaction_person->value();
  $investors = db_query("SELECT n.nid AS nid, n.title AS name FROM {node} AS n INNER JOIN field_data_field_shared_cont_pers AS u ON (n.nid = u.entity_id) WHERE u.field_shared_cont_pers_target_id = :tid", array(':tid' => $person->nid))->fetchAll();

  // If no investors for the contact person create simple string
  if (empty($investors)) {
    $drop_down = array(
      '#prefix' => 'Inga avtalsparter',
      );
  }
  else {
    $options = array(
        '#prefix' => '<div class="dropdown">',
        '#suffix' => '</div>',
      );

    // Add checkbox for each investor connected to the contact person
    // Mark as selected if already selected
    foreach ($investors as $investor) {
      $selected = FALSE;
      $attributes = array(
        'class' => array('add-transaction-ap'),
        'data-transaction-id' => $transaction->nid,
        'data-ap-id' => $investor->nid,
      );

      foreach ($transaction_wrap->field_transaction_investor->value() as $node) {
        $res = db_query("SELECT COUNT(*) AS selected FROM {field_data_field_transaction_ap_ap} WHERE entity_id = :eid AND field_transaction_ap_ap_target_id = :tid", array(':eid' => $node->nid, ':tid' => $investor->nid))->fetchAssoc();

        if ($res['selected'] == 1) {
          $selected = TRUE;
          $attributes['checked'] = 'checked';
          $attributes['disabled'] = 'disabled';
          break;
        }
      }

      $options[$investor->nid] = array(
        '#type' => 'checkbox',
        '#title' => $investor->name,
        '#default_value' => $selected,
        '#attributes' => $attributes,
      );
    }

    // Create drop_down menu for contact person
    $drop_down = array(
      '#type' => 'checkboxes',
      '#prefix' => '<div class="select-container partners">',
      '#suffix' => '</div>',
      'select' => array(
        '#markup' => '<div class="select">Avtalspartners</div>',
      ),
      'options' => $options,
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'sedermera_transaction') . '/js/sedermera_transaction_add_ap.js',
        ),
        'library' => array(
          array('system', 'drupal.ajax'),
          array('system', 'jquery.form'),
          array('editablefields', 'editablefields'),
        ),
      ),
    );
  }

  $rows[] = array();
  $row = count($rows) - 1;

  // Collapsible column
  $rows[$row][] = array(
    'class' => 'collapsible-head',
  );

  // Name column
  $rows[$row][] = array(
    'data' => $person->title,
  );

  // Dropdown column
  $rows[$row][] = array(
    'data' => $drop_down,
  );

  $sum = 0;

  // Teckningsförbindelse if Företrädesemission column
  if ($type_investment['fe_sign']) {
    $sum += $transaction_wrap->field_transaction_fe_sign->value();
    $field = field_view_field('node', $transaction, 'field_transaction_fe_sign',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));
    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Garantiåtagande if Företrädesemission column
  if ($type_investment['fe_warr']) {
    $sum += $transaction_wrap->field_transaction_fe_warant->value();
    $field = field_view_field('node', $transaction, 'field_transaction_fe_warant',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));

    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Teckningsförbindelse if Listningsemission column
  if ($type_investment['le_sign']) {
    $sum += $transaction_wrap->field_transaction_le_sign->value();
    $field = field_view_field('node', $transaction, 'field_transaction_le_sign',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));

    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Garantiåtagande if Listningsemission column
  if ($type_investment['le_warr']) {
    $sum += $transaction_wrap->field_transaction_le_warrant->value();
    $field = field_view_field('node', $transaction, 'field_transaction_le_warrant',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));

    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Teckningsförbindelse if Private Placement column
  if ($type_investment['pp_sign']) {
    $sum += $transaction_wrap->field_transaction_pp_sign->value();
    $field = field_view_field('node', $transaction, 'field_transaction_pp_sign',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));

    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Teckningsförbindelse if Riktad emission column
  if ($type_investment['re_sign']) {
    $sum += $transaction_wrap->field_transaction_re_sign->value();
    $field = field_view_field('node', $transaction, 'field_transaction_re_sign',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));

    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Sum if Brygglån column
  if ($type_investment['bl_sum']) {
    $sum += $transaction_wrap->field_transaction_bridging->value();
    $field = field_view_field('node', $transaction, 'field_transaction_bridging',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));

    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Sum if Blockpost column
  if ($type_investment['bp_sum']) {
    $sum += $transaction_wrap->field_transaction_block->value();
    $field = field_view_field('node', $transaction, 'field_transaction_block',
          array(
            'label'=>'hidden',
            'settings' => array(
              'thousand_separator' => '\'',
            ),
          ));

    $rows[$row][] = array(
      'data' => render($field),
    );
  }

  // Summation column
  $rows[$row][] = array(
    'data' => number_format($sum, 0, "", "'") . " :-",
  );

  // Control column
  $field = field_view_field('node', $person, 'field_user_id_ctrl',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // To control column
  $done = 0;
  $count = 0;

  foreach ($transaction->field_transaction_investor as $value) {
    foreach ($value as $val) {
      $result = db_query("SELECT field_transaction_ap_ctrl_value AS value FROM {field_data_field_transaction_ap_ctrl} WHERE entity_id = :eid", array(':eid' => $val['target_id']))->fetchAll();
      $done += $result[0]->value;
      $count++;
    }
  }

  $rows[$row][] = array(
    'data' => ($done == 0 && $count == 0) ? "0 valda" : $done ."/" . $count . " klara",
  );
}

/**
 * Create the investor rows with editable fields for each investor connected to
 * the contactpersons transaction
 * @param  array &$rows The array to store the table rows content in
 * @param  array $investor_transactions List of investor transactions for the
 * contact person
 * @param  array $type_investment The active investment types used in the offer
 */
function generate_investor_rows_interested(array &$rows, array $investor_transactions, array $type_investment) {
  foreach ($investor_transactions as $investor) {
    $transaction_ap = node_load($investor['target_id']);
    $transaction_ap_wrap = entity_metadata_wrapper('node', $transaction_ap);

    // Get investor from transaction
    $investor = $transaction_ap_wrap->field_transaction_ap_ap->value();

    $rows[] = array();
    $row = count($rows) - 1;

    // Collapsible column
    $rows[$row][] = array(
      'class' => 'collapsible-row',
    );

    // Name column
    $rows[$row][] = array(
      'data' => $investor->title,
    );

    // Dropdown column
    $rows[$row][] = array(
      'data' => '',
    );

    // Teckningsförbindelse if Företrädesemission column
    if ($type_investment['fe_sign']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_fe_sign',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Garantiåtagande if Företrädesemission column
    if ($type_investment['fe_warr']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_fe_warrant',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Teckningsförbindelse if Listningsemission column
    if ($type_investment['le_sign']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_le_sign',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Garantiåtagande if Listningsemission column
    if ($type_investment['le_warr']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_le_warrant',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Teckningsförbindelse if Private placement column
    if ($type_investment['pp_sign']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_pp_sign',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Teckningsförbindelse if Riktad emission column
    if ($type_investment['re_sign']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_re_sign',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Sum if Brygglån column
    if ($type_investment['bl_sum']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_bridging',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Sum if Blockpost column
    if ($type_investment['bp_sum']) {
      $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_block',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($field),
      );
    }

    // Summation column
    $rows[$row][] = array(
      'data' => "SUM_ROW",
    );

    // Control column
    $investor_view_full = node_view($investor);
    $rows[$row][] = array(
      'data' => render($investor_view_full['verification_status']),
    );

    // To control column
    if ($transaction_ap_wrap->field_transaction_ap_ctrl->value()) {
      $rows[$row][] = array(
        'data' => '<span class="to-check-ctrl"></span> kontrollera',
      );
    }
    else {
      $to_ctrl = field_view_field('node', $transaction_ap, 'field_transaction_ap_ctrl',
            array(
              'label'=>'hidden',
              'type' => 'editable',
            ));
      $rows[$row][] = array(
        'data' => render($to_ctrl),
      );
    }
  }
}

/**
 * Generates a summation row for the group
 * @param  array &$rows The array to store the table rows content in
 * @param  array $type_investment The active investment types used in the offer
 */
function generate_sum_row_interested(array &$rows, array $type_investment) {
  $rows[] = array();
  $row = count($rows) - 1;

  // Collapsible column
  $rows[$row][] = array(
    'data' => '',
    'class' => array('sum-row', 'collapsible-row'),
  );

  // Name column
  $rows[$row][] = array(
    'data' => '',
    'class' => array('sum-row'),
  );

  // Dropdown column
  $rows[$row][] = array(
    'data' => '<strong>Summa kontaktperson:</strong>',
    'class' => array('sum-row'),
  );

  // Teckningsförbindelse if Företrädesemission column
  if ($type_investment['fe_sign']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Garantiåtagande if Företrädesemission column
  if ($type_investment['fe_warr']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Teckningsförbindelse if Listningsemission column
  if ($type_investment['le_sign']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Garantiåtagande if Listnigsemission column
  if ($type_investment['le_warr']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Teckningsförbindelse if Private Placement column
  if ($type_investment['pp_sign']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Teckningsförbindelse if Riktat emission column
  if ($type_investment['re_sign']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Sum if Brygglån column
  if ($type_investment['bl_sum']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Sum if Blockpost column
  if ($type_investment['bp_sum']) {
    $rows[$row][] = array(
      'data' => 'SUM_COL',
      'class' => array('sum-row'),
    );
  }

  // Summation column
  $rows[$row][] = array(
    'data' => 'SUM_TOT',
    'class' => array('sum-row'),
  );

  // Control column
  $rows[$row][] = array(
    'data' => '',
    'class' => array('sum-row'),
  );

  // To control column
  $rows[$row][] = array(
    'data' => '',
    'class' => array('sum-row'),
  );
}

/**
 * Get transactions corresponding to an offer
 * @param  integer $nid The offer id
 * @return array List of transaction ids
 */
function get_interested_transactions($nid) {
  $result = db_query("SELECT o.entity_id AS nid
      FROM {field_data_field_transaction_offer} AS o
      INNER JOIN {field_data_field_transaction_interested} AS i
      ON (o.entity_id = i.entity_id)
      WHERE field_transaction_offer_target_id = :nid
      AND field_transaction_interested_value = 1", array(':nid' => $nid))->fetchAllAssoc('nid');
  return array_keys($result);
}

/**
 * Render control table
 */
function sedermera_transaction_control() {
  // Load all transaction ids corresponding to the current offer
  $transactions = get_control_transactions(arg(1));

  // If no transactions exists for the offer present empty table with no content
  if (empty($transactions)) {

    return array(
      // '#theme' => 'table',
      // '#header' => array(),
      // '#rows' => NULL,
      '#prefix' => '<div class="view-empty">',
      '#markup' => 'Det finns inga transaktioner',
      '#suffix' => '</div>',
    );
  }
  else {
    // Load the current offer
    $offer = node_load(arg(1));

    // Array of active investment types used in the offer
    $type_investment = array(
      'fe_sign' => !empty($offer->field_offer_type_fe_sign),
      'fe_warr' => !empty($offer->field_offer_type_fe_warrant),
      'le_sign' => !empty($offer->field_offer_type_le_sign),
      'le_warr' => !empty($offer->ffield_offer_type_le_warrant),
      'pp_sign' => !empty($offer->field_offer_type_pp_sign),
      're_sign' => !empty($offer->field_offer_type_re_sign),
      'bl_sum'  => !empty($offer->field_offer_type_bl_sum),
      'bp_sum ' => !empty($offer->field_offer_type_bp_sum),
    );

    // Arrays holding the content used to build the table
    $header = array();
    $rows = array();

    // Generate the table header
    generate_header_row_control($header);

    // Generate a group for each contact person and its investors
    foreach ($transactions as $transaction_nid) {
      // Load the transaction
      $transaction = node_load($transaction_nid);

      // Generate contactperson head row
      generate_contact_person_head_row_control($rows, $transaction, $type_investment);

      // Generate the investor rows
      foreach ($transaction->field_transaction_investor as $investor_transactions) {

        // Contains agreements for the transaction
        $agreements = array();

        // Checks if there are any agreements for the investor
        foreach ($investor_transactions as $key => $value) {
          $agreement = get_agreements_for_investor($value['target_id']);

          if (!empty($agreement)) {
            $agreements[$value['target_id']] = $agreement;
          }
        }

        // Generate investor head row for agreements
        foreach ($agreements as $key => $agreement) {
          generate_investor_rows_control($rows, $key, $type_investment);

          // Generate rows for all agreements for the transaction on this offer.
          foreach ($agreement as $value) {
            generate_agreement_rows_control($rows, $value, $key);
          }
        }
      }
    }

    // Generate rendarable array for the table and return it.
    return array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#prefix' => '<div class="offer-transactions-list"><div id="transactions-list" class="table-wrapper">',
      '#suffix' => '</div></div>',
    );
  }
}

/**
 * Generates the header row for control
 * @param  array &$header To store the header
 */
function generate_header_row_control(array &$header) {
  // Collapsible column
  $header[] = array(
    'class' => array('table-head', 'Collapsible-head')
  );

  // Name column
  $header[] = array(
    'data' => 'Kontaktperson',
    'class' => array('table-head')
  );

  // Summation column
  $header[] = array(
    'data' => 'Summa',
    'class' => array('table-head')
  );

  // Control UA column
  $header[] = array(
    'data' => 'UA',
    'class' => array('table-head')
  );

  // Control PTV column
  $header[] = array(
    'data' => 'PTV',
    'class' => array('table-head')
  );

  // Control ID column
  $header[] = array(
    'data' => 'ID',
    'class' => array('table-head')
  );

  // Control EXR column
  $header[] = array(
    'data' => 'EXR',
    'class' => array('table-head')
  );

  // Control EU column
  $header[] = array(
    'data' => 'EU',
    'class' => array('table-head')
  );

  // Control KRE column
  $header[] = array(
    'data' => 'KRE',
    'class' => array('table-head')
  );

  // Control KOM column
  $header[] = array(
    'data' => 'KOM',
    'class' => array('table-head')
  );

  // Control PEN column
  $header[] = array(
    'data' => 'PEN',
    'class' => array('table-head')
  );

  // Control agreement column
  $header[] = array(
    'data' => 'Kundavtal',
    'class' => array('table-head')
  );

  // To sign column
  $header[] = array(
    'data' => 'Att teckna',
    'class' => array('table-head')
  );
}

/**
 * Generate header for each contact person on the control table
 * @param  array &$rows to store the rows
 * @param  stdClass $transaction Object of the current transaction
 * @param  array $type_investment List of which transaction types used
 */
function generate_contact_person_head_row_control(array &$rows, stdClass $transaction, array $type_investment) {
  $sum = get_control_transactions_sum($transaction->nid, $type_investment);
  $transaction_wrap = entity_metadata_wrapper('node', $transaction);
  $person = $transaction_wrap->field_transaction_person->value();
  $investors = db_query("SELECT n.nid AS nid, n.title AS name FROM {node} AS n INNER JOIN field_data_field_shared_cont_pers AS u ON (n.nid = u.entity_id) WHERE u.field_shared_cont_pers_target_id = :tid", array(':tid' => $person->nid))->fetchAll();

  $rows[] = array();
  $row = count($rows) - 1;

  // Collapsible column
  $rows[$row][] = array(
    'class' => 'collapsible-head',
  );

  // Name column
  $rows[$row][] = array(
    'data' => $person->title,
  );

  // Summation column
  $rows[$row][] = array(
    'data' => number_format($sum, 0, "", "'") . " :-",
  );

  // Control UA column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control PTV column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control ID column
  $field = field_view_field('node', $person, 'field_user_id_ctrl',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control EXR column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control EU column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control KRE column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control KOM column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control PEN column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control agreement column
  $rows[$row][] = array(
    'data' => '',
  );

  // To sign column
  $done = 0;
  $count = 0;

  foreach ($transaction->field_transaction_investor as $value) {
    foreach ($value as $val) {
      $result = db_query("SELECT field_transaction_agree_to_sign_value AS value FROM {field_data_field_transaction_agree_to_sign} WHERE entity_id = :eid", array(':eid' => $val['target_id']))->fetchAll();
      $done += $result[0]->value;
      $count++;
    }
  }

  $rows[$row][] = array(
    'data' => ($done == 0 && $count == 0) ? "0 valda" : $done ."/" . $count . " klara",
  );
}

/**
 * Generates investor rows
 * @param  array    &$rows           Array to store the rows
 * @param  integer $investor         nid of the current investor
 * @param  array    $type_investment List of which transaction types used
 */
function generate_investor_rows_control(array &$rows, $investor, array $type_investment) {
  $transaction_ap = node_load($investor);
  $transaction_ap_wrap = entity_metadata_wrapper('node', $transaction_ap);

  // Get investor from transaction
  $investor = $transaction_ap_wrap->field_transaction_ap_ap->value();

  $rows[] = array();
  $row = count($rows) - 1;

  // Collapsible column
  $rows[$row][] = array(
    'class' => 'collapsible-row',
  );

  // Name column
  $rows[$row][] = array(
    'data' => $investor->title,
  );

  // Summation column
  $rows[$row][] = array(
    'data' => "",
  );

  // Control UA column
  $field = field_view_field('node', $investor, 'field_investor_shared_ctrl_ua',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control PTV column
  $field = field_view_field('node', $investor, 'field_investor_shared_ctrl_ptv',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control ID column
  $investor_view_full = node_view($investor);
  $rows[$row][] = array(
    'data' => render($investor_view_full['verification_status_id']),
  );

  // Control EXR column
  $field = field_view_field('node', $investor, 'field_investor_shared_ctrl_ext',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control EU column
  $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_ctrl_eu',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control KRE column
  $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_ctrl_cred',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control KOM column
  $field = field_view_field('node', $transaction_ap, 'field_transaction_ap_ctrl_comp',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control PEN column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control agreement column
  $rows[$row][] = array(
    'data' => '',
  );

  // To sign column
  $rows[$row][] = array(
    'data' => '',
  );
}

/**
 * Generate agreement rows
 * @param  array   &$rows          Array to store the rows
 * @param  integer $agreement      nid of current agreement
 * @param  integer $transaction_ap nid of current investor
 */
function generate_agreement_rows_control(array &$rows, $agreement, $transaction_ap) {
  $agremment_node = node_load($agreement);
  $agremment_node_wrap = entity_metadata_wrapper('node', $agremment_node);

  $transaction_node = node_load($transaction_ap);
  $transaction_ap_wrap = entity_metadata_wrapper('node',  $transaction_node);

  $sum = 0;

  //Get the correct sum for the agreement
  switch ($agremment_node_wrap->field_transaction_agree_type_rea->value()) {
    case 'fe_sign':
      $sum = $transaction_ap_wrap->field_transaction_ap_fe_sign->value();
      $type = 'Teckningsförbindelse';
      break;
    case 'fe_warrant':
      $sum = $transaction_ap_wrap->field_transaction_ap_fe_warrant->value();
      $type = 'Garantiåtagande';
      break;
    case 'le_sign':
      $sum = $transaction_ap_wrap->field_transaction_ap_le_sign->value();
      $type = 'Teckningsförbindelse';
      break;
    case 'le_warrant':
      $sum = $transaction_ap_wrap->field_transaction_ap_le_warrant->value();
      $type = 'Garantiåtagande';
      break;
    case 'pp_sign':
      $sum = $transaction_ap_wrap->field_transaction_ap_pp_sign->value();
      $type = 'Teckningsförbindelse';
      break;
    case 're_sign':
      $sum = $transaction_ap_wrap->field_transaction_ap_re_sign->value();
      $type = 'Teckningsförbindelse';
      break;
    case 'bridging':
      $sum = $transaction_ap_wrap->field_transaction_ap_bridging->value();
      $type = 'Brygglån';
      break;
    case 'block':
      $sum = $transaction_ap_wrap->field_transaction_ap_block->value();
      $type = 'Blockpost';
      break;
  }

  $rows[] = array();
  $row = count($rows) - 1;

  // Collapsible column
  $rows[$row][] = array(
    'class' => 'collapsible-row',
  );

  // Name column
  $rows[$row][] = array(
    'data' => $type,
  );

  // Summation column
  $rows[$row][] = array(
    'data' => number_format($sum, 0, "", "'") . " :-",
  );

  // Control UA column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control PTV column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control ID column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control EXR column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control EU column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control KRE column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control KOM column
  $rows[$row][] = array(
    'data' => '',
  );

  // Control PEN column
  $field = field_view_field('node', $agremment_node, 'field_transaction_agree_ctrl',
        array(
          'label'=>'hidden',
          'type' => 'sedermera_verification_status',
        ));
  $rows[$row][] = array(
    'data' => render($field),
  );

  // Control agreement column
  $nid = $agremment_node->nid;
  $rows[$row][] = array(
    'data' => l('Hantera avtal', "node/$nid/edit/control"),
  );

  // To sign column
  if ($agremment_node_wrap->field_transaction_agree_to_sign->value()) {
    $rows[$row][] = array(
      'data' => '<span class="to-sign-ctrl"></span> att teckna',
    );
  }
  else {
    $to_sign = field_view_field('node', $agremment_node, 'field_transaction_agree_to_sign',
          array(
            'label'=>'hidden',
            'type' => 'editable',
          ));
    $rows[$row][] = array(
      'data' => render($to_sign),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 * Hide fields on control edit.
 */
function sedermera_transaction_form_transaction_agreement_node_form_alter(&$form, &$form_state, $form_id) {
  // Manipulate only if control edit
  if (arg(3) === 'control') {
    unset($form['title']);
    unset($form['field_transaction_agree_ctrl']);
    unset($form['field_transaction_agree_to_sign']);
    unset($form['field_transaction_agree_sign']);
    unset($form['field_transaction_agree_sign_dat']);
    unset($form['field_transaction_agree_type_rea']);
    $form_state['#rebuild'] = TRUE;
  }
}

/**
 * Get all agreements for the investor
 * @param  integer $nid Nid of the investor
 * @return array        List of nid of all agreements for the investor
 */
function get_agreements_for_investor($nid) {
  $result = db_query("SELECT field_transaction_ap_agree_target_id AS nid
    FROM field_data_field_transaction_ap_agree
    WHERE entity_id = :nid", array(':nid' => $nid))->fetchAllAssoc('nid');

  return array_keys($result);
}

/**
 * Get all control transactions for the offer
 * @param  integer $nid Nid of the offer
 * @return array        List of nid of all transactions for the offer
 */
function get_control_transactions($nid) {
  $result = db_query("SELECT o.entity_id AS nid
    FROM field_data_field_transaction_offer AS o
    INNER JOIN field_data_field_transaction_investor AS v
    ON (o.entity_id = v.entity_id)
    INNER JOIN field_data_field_transaction_ap_ctrl AS i
    ON (v.field_transaction_investor_target_id = i.entity_id)
    WHERE o.field_transaction_offer_target_id = :nid
    AND i.field_transaction_ap_ctrl_value = 1", array(':nid' => $nid))->fetchAllAssoc('nid');
  return array_keys($result);
}

/**
 * Get total sum for the transaction
 * @param  integer $nid            Nid for the transaction
 * @param  array $type_investment  List of which transaction types used
 * @return integer                 Sum of the transaction
 */
function get_control_transactions_sum($nid, array $type_investment) {
  $result = db_query("SELECT field_transaction_investor_target_id AS nid
    FROM {field_data_field_transaction_investor} AS inv
    INNER JOIN {field_data_field_transaction_ap_ctrl} AS ap
    ON (inv.field_transaction_investor_target_id = ap.entity_id)
    WHERE inv.entity_id = :nid
    AND ap.field_transaction_ap_ctrl_value = 1", array(':nid' => $nid))->fetchAllAssoc('nid');

  $sum = 0;

  foreach (array_keys($result) as $value) {
    $node = entity_metadata_wrapper('node', node_load($value));

    if ($type_investment['fe_sign']) {
      $sum += $node->field_transaction_ap_fe_sign->value();
    }
    if ($type_investment['fe_warr']) {
      $sum += $node->field_transaction_ap_fe_warrant->value();
    }
    if ($type_investment['le_sign']) {
      $sum += $node->field_transaction_ap_le_sign->value();
    }
    if ($type_investment['le_warr']) {
      $sum += $node->field_transaction_ap_le_warrant->value();
    }
    if ($type_investment['pp_sign']) {
      $sum += $node->field_transaction_ap_pp_sign->value();
    }
    if ($type_investment['re_sign']) {
      $sum += $node->field_transaction_ap_re_sign->value();
    }
    if ($type_investment['bl_sum']) {
      $sum += $node->field_transaction_ap_bl_bridging->value();
    }
    if ($type_investment['bp_sum']) {
      $sum += $node->field_transaction_ap_bp_block->value();
    }
  }
  return $sum;
}

/**
 * Page callback for adding an avtalspart to a transaction.
 *
 * @param int $transaction_id
 *   Node ID for the transaction.
 * @param int $ap_id
 *   Node ID for the avtalspart node.
 */
function sedermera_transaction_add_ap($transaction_id, $ap_id) {
  // Create the new Transaktion AP node with a reference to the AP, and save the
  // node.
  $transaktion_ap = entity_create('node', array(
    'type' => 'transaktion_ap',
    'field_transaction_ap_ap' => array(
      LANGUAGE_NONE => array(
        array('target_id' => $ap_id),
      ),
    ),
  ));
  node_save($transaktion_ap);

  // Update the transaction node with a reference to the newly created
  // Transaktion AP node.
  $transaction = entity_metadata_wrapper('node', $transaction_id);
  $transaction->field_transaction_investor[] = $transaktion_ap;
  $transaction->save();

  // Re-render the table, and return an AJAX command which will replace the old
  // table.
  $table = sedermera_transaction_intresent($transaction->field_transaction_offer->nid->value());
  return array(
    '#type' => 'ajax',
    '#commands' => array(ajax_command_replace('#intresent-table', render($table))),
  );
}
