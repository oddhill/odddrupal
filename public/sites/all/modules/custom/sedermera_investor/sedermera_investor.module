<?php

/**
 * @file sedermera_investor.module
 * Main module file for the Sedermera Investor module.
 */

/**
 * Implements hook_permission().
 */
function sedermera_investor_permission() {
  return array(
    'view investors' => array(
      'title' => t('View investors'),
      'description' => t('Access the administration list for investors.'),
    ),
    'administer investors' => array(
      'title' => t('Administer investors'),
      'description' => t('Add entities of any investor bundles.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sedermera_investor_menu() {
  $items['avtalsparter/skapa'] = array(
    'title' => 'Lägg till avtalspart',
    'page callback' => 'sedermera_investor_create_page',
    'access arguments' => array('administer investors'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function sedermera_investor_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'sedermera_investor') . '/views',
  );
}

/**
 * Title callback for the entity pages for investor bundles.
 */
function sedermera_investor_entity_page_title($entity) {
  // Return the label of the entity.
  return entity_label('investor', $entity);
}

/**
 * Page callback for the investerare/skapa path.
 *
 * This will generate a page that looks like the node/add page.
 *
 * @see node_add_page()
 */
function sedermera_investor_create_page() {
  $items[] = array(
    'title' => 'Avtalspart Privat',
    'href' => "node/add/investor-private",
    'description' => 'Lägg till en ny privatperson.',
    'localized_options' => array(
      'query' => array('destination' => 'avtalsparter'),
    ),
  );

  $items[] = array(
    'title' => 'Avtalspart Bolag',
    'href' => "node/add/investor-company",
    'description' => 'Lägg till ett nytt bolag.',
    'localized_options' => array(
      'query' => array('destination' => 'avtalsparter'),
    ),
  );

  return theme('node_add_list', array('content' => $items));
}

/**
 * Implements hook_field_widget_form_alter().
 */
function sedermera_investor_field_widget_form_alter(&$element, &$form_state, $context) {
  // Disable access to the field_shared_temp field. This will hopefully be
  // managed automatically in the future. We'll disable it for now, just to make
  // sure that we avoid any confusion for the end user.
  if ($element['#field_name'] == 'field_shared_temp') {
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_presave
 */
function sedermera_investor_node_presave($node) {
  if ($node->type === 'person' && $node->is_new == 1) {
    // Set the node title of the ID control connected to the person node
    $ctrl = node_load($node->field_user_id_ctrl[LANGUAGE_NONE][0]['target_id']);
    $ctrl->title = $node->title . " ID kontroll";
    node_save($ctrl);
  }
  if (($node->type === 'investor_company' || $node->type === 'investor_private') && $node->is_new == 1) {
    // Set the node title of the control connected to the investor node
    $ua_ctrl = node_load($node->field_investor_shared_ctrl_ua[LANGUAGE_NONE][0]['target_id']);
    $ua_ctrl->title = $node->title . " Uppdragsavtal";
    node_save($ua_ctrl);
    $ptv_ctrl = node_load($node->field_investor_shared_ctrl_ptv[LANGUAGE_NONE][0]['target_id']);
    $ptv_ctrl->title = $node->title . " PTV-blankett";
    node_save($ptv_ctrl);
    $cred_ctrl = node_load($node->field_investor_shared_ctrl_cred[LANGUAGE_NONE][0]['target_id']);
    $cred_ctrl->title = $node->title . " Kreditkontroll";
    node_save($cred_ctrl);
    $ext_ctrl = node_load($node->field_investor_shared_ctrl_ext[LANGUAGE_NONE][0]['target_id']);
    $ext_ctrl->title = $node->title . " Externt register";
    node_save($ext_ctrl);
  }
  // if ($node->type === 'transaction_ap' && $node->is_new == 1) {
  //   $ap = node_load($node->field_transaction_ap_ap[LANGUAGE_NONE][0]['target_id']);
  //   // Set the node title of the control connected to the investor node
  //   $eu_ctrl = node_load($node->field_transaction_ap_ctrl_eu[LANGUAGE_NONE][0]['target_id']);
  //   $eu_ctrl->title = $ap->title . " EU:s sanktionsförordningar";
  //   node_save($eu_ctrl);
  //   $comp_ctrl = node_load($node->field_transaction_ap_ctrl_comp[LANGUAGE_NONE][0]['target_id']);
  //   $comp_ctrl->title = $ap->title . " Kompleterande frågor";
  //   node_save($comp_ctrl);
  // }
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function sedermera_investor_form_investor_company_node_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['node']->nid)) {
    $id = get_next_cust_id();
    $form['field_shared_cust_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $id;
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function sedermera_investor_form_investor_private_node_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['node']->nid)) {
    $id = get_next_cust_id();
    $form['field_shared_cust_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $id;
  }
}

/**
 * Generate the next incremental customer id
 * @return Incremented customer id.
 */
function get_next_cust_id() {
  $result = db_query("SELECT field_shared_cust_id_value AS id FROM field_data_field_shared_cust_id ORDER BY field_shared_cust_id_value DESC")->fetchAssoc();

  preg_match('!\d+!', $result['id'], $matches);
  $n2 = str_pad($matches[0] + 1, 3, 0, STR_PAD_LEFT);

  return 'A' . $n2;
}


/**
 * Implements hook_node_validate().
 */
function sedermera_investor_node_validate($node, $form, &$form_state) {
  if ($form_state['values']['type'] == 'person') {
    if ($form_state['values']['field_user_lead'][LANGUAGE_NONE][0]['value'] == 0) {
      if ($form_state['values']['field_user_mail'][LANGUAGE_NONE][0]['email'] == '') {
        form_set_error('field_user_mail', t('Mejl address måste fyllas i.'));
      }
      if ($form_state['values']['field_user_ssn'][LANGUAGE_NONE][0]['value'] == '') {
        form_set_error('field_user_ssn', t('Personnummer måste fyllas i.'));
      }
      $pnbr = $node->field_user_ssn[LANGUAGE_NONE][0]['value'];

      if (isset($node->nid)) {
        if (!person_nbr_is_same($pnbr, $node->nid) && person_nbr_exists($pnbr)) {
          form_set_error('field_user_ssn', t('Person number already in use.'));
        }
      }
      else {
        if (person_nbr_exists($pnbr)) {
          form_set_error('field_user_ssn', t('Person number already in use.'));
        }
      }
    }
  }
  if ($form_state['values']['type'] == 'investor_company') {
    $org_nbr = $node->field_investor_comp_org_nbr[LANGUAGE_NONE][0]['value'];
    $cust_id = $form_state['values']['field_shared_cust_id'][LANGUAGE_NONE][0]['value'];

    if (isset($node->nid)) {
      if (!org_nbr_is_same($org_nbr, $node->nid) && org_nbr_exists($org_nbr)) {
        form_set_error('field_investor_comp_org_nbr', t('Organisation number already in use.'));
      }
      if (!cust_id_is_same($cust_id, $node->nid) && cust_id_exists($cust_id)) {
        form_set_error('field_investor_comp_org_nbr', t('Organisation number already in use.'));
      }
    }
    else {
      if (org_nbr_exists($org_nbr)) {
        form_set_error('field_investor_comp_org_nbr', t('Organisation number already in use.'));
      }
      if (cust_id_exists($cust_id)) {
        form_set_error('field_shared_cust_id', t('Customer id already exists, please resave use id: ' . get_next_cust_id()));
      }
    }
  }
  if ($form_state['values']['type'] == 'investor_private') {
    $cust_id = $form_state['values']['field_shared_cust_id'][LANGUAGE_NONE][0]['value'];
    if (isset($node->nid)) {
      if (!cust_id_is_same($cust_id, $node->nid) && cust_id_exists($cust_id)) {
        form_set_error('field_investor_comp_org_nbr', t('Organisation number already in use.'));
      }
    }
    else {
      if (cust_id_exists($cust_id)) {
        form_set_error('field_shared_cust_id', t('Customer id already exists, please resave use id: ' . get_next_cust_id()));
      }
    }
  }
}

/**
 * Checks if customer id already exist in the system
 * @param  $cust_id Customer id to check for
 * @return boolean true if exists else false
 */
function cust_id_exists($cust_id) {
  $result = db_query("SELECT COUNT(*) AS count FROM field_data_field_shared_cust_id WHERE field_shared_cust_id_value = :id", array(':id' => $cust_id))->fetchAll();

  return ($result[0]->count > 0) ? TRUE : FALSE;
}

/**
 * Checks if person number has been changed from the existing in the system
 * @param  $pnbr Person number to check for
 * @param  $nid  The node to check on
 * @return boolean true if no change else false
 */
function cust_id_is_same($custid, $nid) {
  $cust_id_is_same = db_query("SELECT COUNT(*) AS count FROM field_data_field_shared_cust_id WHERE field_shared_cust_id_value = :custid AND entity_id = :nid", array(':custid' => $custid, ':nid' => $nid))->fetchAssoc();

  return $cust_id_is_same['count'] ? TRUE : FALSE;
}

/**
 * Checks if person number already exists in the system
 * @param  $pnbr The person number to check for
 * @return boolean true if exists else false
 */
function person_nbr_exists($pnbr) {
  $pnbr_exists = db_query("SELECT COUNT(*) AS count FROM field_data_field_user_ssn WHERE field_user_ssn_value = :pnbr", array(':pnbr' => $pnbr))->fetchAssoc();

  return $pnbr_exists['count'] ? TRUE : FALSE;
}

/**
 * Checks if person number has been changed from the existing in the system
 * @param  $pnbr Person number to check for
 * @param  $nid  The node to check on
 * @return boolean true if no change else false
 */
function person_nbr_is_same($pnbr, $nid) {
  $pnbr_is_same = db_query("SELECT COUNT(*) AS count FROM field_data_field_user_ssn WHERE field_user_ssn_value = :pnbr AND entity_id = :nid", array(':pnbr' => $pnbr, ':nid' => $nid))->fetchAssoc();

  return $pnbr_is_same['count'] ? TRUE : FALSE;
}

/**
 * Checks if organisation number already exists in the system
 * @param  $org_nbr The organisation number to check for
 * @return boolean true if exists else false
 */
function org_nbr_exists($org_nbr) {
  $org_nbr_exists = db_query("SELECT COUNT(*) AS count FROM field_data_field_investor_comp_org_nbr WHERE field_investor_comp_org_nbr_value = :org_nbr", array(':org_nbr' => $org_nbr))->fetchAssoc();

  return $org_nbr_exists['count'] ? TRUE : FALSE;
}

/**
 * Checks if organisation number has been changed from the existing in the system
 * @param  $org_nbr Person number to check for
 * @param  $nid  The node to check on
 * @return boolean true if no change else false
 */
function org_nbr_is_same($org_nbr, $nid) {
  $org_nbr_is_same = db_query("SELECT COUNT(*) AS count FROM field_data_field_investor_comp_org_nbr WHERE field_investor_comp_org_nbr_value = :org_nbr AND entity_id = :nid", array(':org_nbr' => $org_nbr, ':nid' => $nid))->fetchAssoc();

  return $org_nbr_is_same['count'] ? TRUE : FALSE;
}
